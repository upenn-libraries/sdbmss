<script type="text/javascript">

 $(document).ready(function() {

     var resourceName = "<%= resource_name %>";

     /*
        Identify user permissions for the various actions available on the "Manage" page
      */

     <% if can? :manage, model_class  %>
         var onlyMine = "<%= params[:created_by] || "" %>";
     <% else %>
         var onlyMine = 0;
     <% end %>

     <% if can? :deprecate, model_class %>
         var canDeprecate = 1;
     <% else %>
         var canDeprecate = 0;
     <% end %>

     <% if can? :destroy, model_class %>
         var canDestroy = 1;
     <% else %>
         var canDestroy = 0;
     <% end %>

     <% if can? :edit, model_class %>
         var canEdit = 1;
     <% else %>
         var canEdit = 0;
         var username = '<%= current_user.username %>';
     <% end %>
    var user_id = '<%= current_user.id %>';

     // Subclass of SDBM.ManageRecords tailored for display of entries
     var ManageEntries = function(options) {
         SDBM.ManageRecords.call(this, options);
     };

     ManageEntries.prototype = Object.create(SDBM.ManageRecords.prototype);

     ManageEntries.prototype.createTable = function (selector) {

         var manageEntries = this;

         var sdbmTable = new SDBM.EntryTable("#search_results", {
             heightBuffer: 280,
             fixedColumns: 3,
             prependColumns: [
                 {
                     sdbmssMinWidth: "25px",
                     sdbmssMaxWidth: "25px",
                     title: '<input type="checkbox" id="select-all" class="hideIfReviewed">',
                     orderable: false,
                     className: 'text-center unreviewed_only',
                     render: function (data, type, full, meta) {
                         //if(showApprovalControls()) {
                            return '<input type="checkbox" name="approve" value="' + full[manageEntries.dataTable.getColumnIndex("ID")] + '"/>';
                         //}
                         //return '';
                     }
                 },
                 /*
                    Generate the buttons for User actions
                  */
                 {
                     sdbmssMinWidth: "300px",
                     sdbmssMaxWidth: "300px",
                     title: 'Actions',
                     orderable: false,
                     render: function (data, type, full, meta) {

                         if (full[sdbmTable.getColumnIndex("Deprecated")] === true) {
                            return '<div class="text-danger text-center bg-danger">This Record is DEPRECATED</div>';
                         } else {
                            var entryId = full[sdbmTable.getColumnIndex("ID")];
                            var manuscriptId = full[sdbmTable.getColumnIndex("Manuscript")] ? full[sdbmTable.getColumnIndex("Manuscript")][0].id : null;
                            var linkingToolURL = manuscriptId ? '/linkingtool/manuscript/' + manuscriptId : '/linkingtool/entry/' + entryId;

                            var editable = full[sdbmTable.getColumnIndex("Can Edit")];

                            var result = '<span class="btn-group options-btn-group">';
/*
                            if (!full[sdbmTable.getColumnIndex("Bookmarked")]) {                            
                                result += '<a data-type="json" class="bookmark btn btn-xs btn-default" data-remote="true" rel="nofollow" data-method="post" href="/bookmarks?document_id=' + entryId + '&amp;document_type=Entry"><span class="glyphicon glyphicon-bookmark"></span></a>';
                            }*/
                            /*if (!full[sdbmTable.getColumnIndex("Watched")]) {
                                result += '<a data-type="json" class="btn btn-xs btn-default" data-remote="true" rel="nofollow" data-method="post" href="/watches?watched_id=' + entryId + '&amp;watched_type=Entry&user_id=' + user_id + '&button=true"><span class="glyphicon glyphicon-eye-open"></span></a>';
                            }*/
                            result += full[sdbmTable.getColumnIndex("BookmarkWatch")];
                            // bookmark button

                            //result += '<a onclick="addBookmark(' + entryId + ', \'Entry\');" class="btn btn-xs btn-default control-bookmark bookmark-link" in_bookmarks="/entries/' + entryId + '"><span class="glyphicon glyphicon-bookmark"></span></a>';

                            // edit
                            if (editable) {
                                result += '<a class="btn btn-xs btn-success" href="/entries/' + entryId + '/edit" target="_blank">Edit</a>';
                            } else {
                                result += '<a class="btn btn-xs btn-default disabled">Edit</a>';
                            }

                            // destroy
                            if (canDestroy) {
                                result += '<a class="btn btn-xs btn-danger entry-delete-link ' + (manuscriptId === null ? '' : 'disabled') + '" href="#" target="_blank">Delete</a>'
                            }

                            // linking tool
                            result += '<a class="btn btn-xs btn-info find-or-create-manuscript-link" href="' + linkingToolURL + '" target="_blank">Linking Tool</a>';

                            // deprecate
                            if (canDeprecate) {
                                result += '<a href="#" class="btn btn-xs btn-warning entry-deprecate-link">Deprecate</a>';
                            }

                            result += "</span>";
                            return result;
                         }
                     }
                 }
             ],
             ajax: function (sdbmTable, dt_params, callback, settings) {
                 $("#spinner").show();

                 var params = manageEntries.translateSearchParams(sdbmTable, dt_params);
                 //console.log(params, "FIX ME: is this happening twice?");
                 // hide drafts from table view
                 //params["draft"] = false;
                 sdbmTable.searchAndUpdateTable(params, callback, {
                     complete: function () {
                         $("#spinner").hide();
//                          renewBookmarks();

                         if(showApprovalControls()) {
                            //$(".approve-control").show();
                            //$('.unreviewed_only').show();//.css({"display": "table-cell"});
                         } else {
                            //$(".approve-control").hide();
                            //$('.unreviewed_only').hide();
                         }
                     }
                 });
             }
         });

         return sdbmTable;
     };

     var showUnapprovedOnly = function() {
         return $("input[name='unapproved_only']").is(":checked");
     };

     var showApprovalControls = function() {
         return showUnapprovedOnly() && !onlyMine;
     };

     // Fielded search specific params
     ManageEntries.prototype.translateSearchParams = function (sdbmTable, data) {
         return $.extend(
             {},
             sdbmTable.translateParamsToBlacklight(data),
             this.getSearchFields()
         );
     };

     ManageEntries.prototype.getSearchFields = function () {
         var params = {};
         params["op"] = $("select[name='op']").val();

         $(".search-block").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val() + "[]";
             var search_value = $(element).find("input[name='search_value']").first().val();
             if (search_value == "" ) search_value = "*";
             var search_option = $(element).find("select[name='search_option']").first().val();
             var search_option_field = $(element).find("select[name='search_field']").first().val() + "_option[]";
            if (!params[search_field]) {
                params[search_field] = [search_value];
            }
            else {
                params[search_field].push(search_value);
            }

            if (!params[search_option_field]) {
                params[search_option_field] = [search_option];
            } else {
                params[search_option_field].push(search_option);
            }            
         });

        // prevent 'approved = *' from returning ALL entries for an 'OR' search
        // params["approved"] = showUnapprovedOnly() ? "false" : "*";
         if (showUnapprovedOnly()) {
            params["approved"] = "false";
         } else {
            delete(params["approved"]);
         }

         if(onlyMine.length > 0) {
             params["created_by"] = [onlyMine];
             params["created_by_option"] = ["with"];
         }

         return params;
     };

     ManageEntries.prototype.setFormStateFromURL = function () {
     }

     ManageEntries.prototype.createFormSubmitHandler = function () {
         var manageEntries = this;
         return function(event) {
             manageEntries.doSearch(false);
         };
     };

     ManageEntries.prototype.doSearch = function () {
         var manageEntries = this;
         manageEntries.dataTable.reload();
     };

     ManageEntries.prototype.getSearchURL = function (format) {
         var url =  '/' + this.options.resourceName + '/search';
         if(format) {
             url += "." + format;
         }
         return url;
     };

    ManageEntries.prototype.getCSVSearchUrl = function () {
        var params = manageEntries.getSearchFields();
        params["search_field"] = "advanced";
        params["per_page"] = <%= Rails.configuration.sdbmss_max_search_results %>;

        return URI("/entries.csv").search(params);
    };

     var manageEntries = new ManageEntries({
         resourceName: "<%= resource_name %>",
         resourceNameSingular: "<%= resource_name.singularize %>",
         resourceNamePlural: "<%= resource_name.pluralize %>",
         showOnlyRecordsCreatedByUser: onlyMine,
         searchNameField: "name"
     });

     SDBM.setPageFullWidth();

     $('#search_results').on('draw.dt', function () {
        bindRemoteAjaxCallback();
     });

     $(".search-form").submit(function (e) {
        e.preventDefault();
        manageEntries.doSearch(false);
     });

    $(document).on("click", ".entry-delete-link", function (event) {
        var sdbmTable = manageEntries.dataTable;
        var row_data = sdbmTable.dataTable.row($(event.target).closest("tr")).data();
        var entry_id = row_data[sdbmTable.getColumnIndex("ID")];
        dataConfirmModal.confirm({
            title: 'Confirm',
            text: "Are you sure you want to delete entry " + entry_id + "?",
            commit: 'Yes',
            cancel: 'Cancel',
            zIindex: 10099,
            onConfirm: function() { 
                $.ajax({
                    url: '/entries/' + entry_id,
                    type: 'DELETE',
                    error: function() {
                     SDBM.showErrorModal("#modal", "An error occurred deleting this record.");
                    },
                    complete: function() {
                     sdbmTable.reload();
                    }
                });
            },
            onCancel:  function() { }
        });
        return false;
     });

     var entryIdToDeprecate;

     $(document).on("click", ".entry-deprecate-link", function (event) {
         var sdbmTable = manageEntries.dataTable;
         var row_data = sdbmTable.dataTable.row($(event.target).closest("tr")).data();
         var entry_id = row_data[sdbmTable.getColumnIndex("ID")];
         var superceded_by_id = row_data[sdbmTable.getColumnIndex("Superceded By")];

         entryIdToDeprecate = entry_id;

         SDBM.openDeprecateModal(entry_id, superceded_by_id, function() {
             manageEntries.dataTable.reload();
         });

         return false;
     });

    $(document).on('click', "#select-all", function(event) {
        if (!$("#select-all").prop("all-entries-selected2")) {
            $("#select-all").prop("all-entries-selected2", true);
            $("input[name='approve']").prop("checked", true);
        } else {
            $("#select-all").prop("all-entries-selected2", false);
            $("input[name='approve']").prop("checked", false);
        }
    });

    $(document).on('click', "#deselect-all", function(event) {
        $("input[name='review']").prop("checked", false);
        return false;
    });

     $(document).on('click', "#mark-as-approved", function(event) {
         var sdbmTable = manageEntries.dataTable;
         var ids = [];
         $("input[name='approve']:checked").each(function (idx, element) {
             ids.push($(element).val());
         });

         if(ids.length > 0) {
             $("#spinner").show();
             $.ajax({
                 url: '/entries/mark_as_approved.json',
                 type: 'POST',
                 data: { ids: ids },
                 success: function(data, textStatus, jqXHR) {
                     sdbmTable.reload();
                 },
                 error: function() {
                     SDBM.showErrorModal("#modal", "An error occurred marking records as reviewed");
                 },
                 complete: function() {
                     $("#spinner").hide();
                 }
             });
         }

         return false;
     });

     // since the entry-table default is 'wide', adjust the fullscreen icon
     $("#widescreen > span").toggleClass('glyphicon-resize-small').toggleClass('glyphicon-resize-full');    

 });

</script>

<div id="group_modal" class="modal fade panel-body" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add/Remove Records From Your Groups</h4>
            </div>
            <div class="modal-body">
                <%= render partial: "manage_models/group_form" %>                            
            </div>
        </div>
    </div>
</div>