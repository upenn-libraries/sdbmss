<script type="text/javascript">
var data;

$(document).ready(function() {

     SDBM.setPageFullWidth();

     var resourceName = "<%= resource_name %>";

     // flag = show all records, or only those that the user created
     <% if can? :index, model_class  %>
         var onlyMine = <%= params[:created_by_user] || 0 %>;
     <% else %>
         var onlyMine = 1;
     <% end %>

     <% if can? :destroy, model_class %>
         var canDestroy = 1;
     <% else %>
         var canDestroy = 0;
     <% end %>

     <% if can? :edit, model_class %>
         var canEdit = 1;
     <% else %>
         var canEdit = 0;
         var username = "<%= current_user.username %>"
     <% end %>

     <% if can? :merge, model_class %>
         var canMerge = 1;
     <% else %>
         var canMerge = 0;
     <% end %>

     // Subclass of SDBM.ManageRecords tailored for display of names (ie users)
     var ManageSources = function(options) {
         SDBM.ManageRecords.call(this, options);
     };
     
     ManageSources.prototype = Object.create(SDBM.ManageRecords.prototype);

     ManageSources.prototype.getColumns = function() {
         var manageRecords = this;

         return [
             {
                title: '<input type="checkbox" id="select-all" class="hideIfReviewed">',
                orderable: false,
                className: 'text-center unreviewed_only',
                render: function (data, type, full, meta) {
                    if(manageRecords.getUnreviewedOnly() === 1) {
                          return '<input type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '"/>';
                    }
                    return '';
                },
             },
             {
                 title: 'Options',
                 orderable: false,                 
                 sdbmssMinWidth: "300px",
                 sdbmssMaxWidth: "300px",
                 render: function (data, type, full, meta) {
                    var created_by = full[manageRecords.dataTable.getColumnIndex("Created By")];
                    var result = '<span class="btn-group options-btn-group">';
                    result += full[manageRecords.dataTable.getColumnIndex("BookmarkWatch")];
                    editable = full[manageRecords.dataTable.getColumnIndex("CanEdit")];
                    source_type  = full[manageRecords.dataTable.getColumnIndex("Source Type")];
                    if (editable) {
                        result += '<a class="btn btn-xs btn-success" href="/' + manageRecords.options.resourceName + '/' + data + '/edit/">Edit</a>';
                    } else {
                        result += '<a class="btn btn-xs btn-default disabled">Edit</a>';
                    }
                    // if I can edit the source, or it is any source OTHER than a personal/provenance observation
                    if (source_type.indexOf('Observation') == -1 || editable) {
                        result += '<a class="btn btn-xs btn-primary" href="/entries/new/?source_id=' + data + '">Add an Entry</a>';                        
                    } else {
                        result += '<a class="btn btn-xs btn-default disabled">Add an Entry</a>';                        
                    }

                    if (canDestroy) {
                        result += '<a class="btn btn-xs btn-danger delete-link" href="/' + manageRecords.options.resourceName + '/' + data + '.json">Delete</a>';
                    }
                    if (canMerge) {
                        result += '<a class="btn btn-xs btn-info" href="/sources/' + data + '/merge">Merge</a></span>';
                    }
                    result += '</span>';
                    return result;
                }
             },
             {
                 title: 'ID',
                 width: "10%",
                 render: function (data, type, full, meta) { 
                     var str = '<a href="/' + manageRecords.options.resourceName + '/' + data + '/">SDBM_SOURCE_' + data + '</a>';
                     return str;
                 },
                 dbSortField: 'id'
             },
             {
                 title: 'Source Type',
                 dbSortField: 'source_type'
             },
             {
                 title: '# Entries',
                 dbSortField: 'entries_count'
             },
             {
                 title: 'Date',
                 width: "10%",
                 dbSortField: 'date'
             },
             {
                 title: 'Title',
                 width: "70%",
                 dbSortField: 'title'
             },
             {
                 title: 'Author',
                 dbSortField: 'author'
             },
             {
                 orderable: false, // too difficult to sort by this
                 title: 'Source Agent'
             },
             {
                 orderable: false, // too difficult to sort by this
                 title: 'Institution/Collection'
             },
             {
                 title: 'Medium',
                 dbSortField: 'medium'
             },
             {
                 title: "Date Accessed",
                 dbSortField: 'date_accessed',
                 orderable: false // FIX ME: add indexing or no?
             },
             {
                 title: "Institution/Location",
                 dbSortField: 'location_institution'
             },
             {
                 title: "Location",
                 dbSortField: 'location'
             },
             {
                 title: "Link",
                 dbSortField: 'link',
                 orderable: false
             },
             {
                 title: 'Added By',
                 dbSortField: 'created_by'
             },
            {
                title: 'Added On',
                dbSortField: 'created_at'
            },
            {
                title: 'Updated By',
                dbSortField: 'updated_by'
            },
            {
                title: 'Updated On',
                dbSortField: 'updated_at'
            },
            {
                title: "Approved",
                dbSortField: 'reviewed'
            },
            {
                title: "BookmarkWatch",
                visible: false,
                searchable: false,
                never_show: true
            },
            {
                title: "CanEdit",
                dbSortField: 'can_edit',
                visible: false,
                searchable: false,
                never_show: true
            }
         ];
     };

     ManageSources.prototype.searchResultToTableRow = function (result) {
         return [
             null,
             result.id,
             result.id,
             result.source_type,
             result.entries_count || 0,
             result.date,
             result.title,
             result.author,
             result.selling_agent,
             result.institution,
             //result.whether_mss,
             result.medium,
             result.date_accessed,
             result.location_institution,
             result.location,
             result.link,
             result.created_by || "",
             result.created_at || "",
             result.updated_by || "",
             result.updated_at || "",
             result.reviewed,
             result.bookmarkwatch,
             result.can_edit
         ];
     };

     ManageSources.prototype.getSearchFields = function () {
         var params = {};
         params["op"] = $("select[name='op']").val() || "AND";

         $(".search-block").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val();
             var search_value = $(element).find("input[name='search_value']").first().val();
             if(search_value) {
                if (!params[search_field]) {
                    params[search_field] = [search_value];
                }
                else {
                    params[search_field].push(search_value);
                }
             }
         });
         
         if(onlyMine) {
             params["created_by_user"] = 1;
         }

         return params;
     };

     ManageSources.prototype.createSearchParams = function (dt_params) {
         var params = $.extend(
             {},
             SDBM.ManageRecords.prototype.createSearchParams.call(this, dt_params),
             this.getSearchFields()
         );
         // don't send 'term'
         //delete params["term"];
         return params;
     };

     ManageSources.prototype.persistFormStateToURL = function () {
         var manageSources = this;

         var params = {
             unreviewed_only: manageSources.getUnreviewedOnly()
         };
         $(".search-fieldset").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val();
             var search_value = $(element).find("input[name='search_value']").first().val();
             if(search_value) {
                if (params[search_field]) {
                    params[search_field].push(search_value);
                } else {
                    params[search_field] = [search_value];
                }
             }
         });
         //console.log(params);
         //console.log(URI(manageSources.getResourceIndexURL()).search(params));

         return URI(manageSources.getResourceIndexURL()).search(params);
     };
/*
    SDBM.ManageRecords.prototype.setFormStateFromURL = function() {
        var manageRecords = this;
        var qs = new URI().query(true);

         $(".search-fieldset").each(function(idx, element) {
            console.log('mgmgm');
             var search_field = $(element).find("select[name='search_field']").first();
             var search_value = $(element).find("input[name='search_value']").first();
             var populated = false;
             search_field.children().each(function (idx, option) {
                 if(!populated && qs[option.value] && qs[option.value].length > 0) {
                     search_field.val(option.value);
                     if (Array.isArray(qs[option.value]) && qs[option.value].length > 0) {
                         search_value.val(qs[option.value].pop());
                         if (qs[option.value].length == 0) qs[option.value] = undefined;
                     } else if ( qs[option.value] != undefined ) {
                        search_value.val(qs[option.value]);
                        qs[option.value] = undefined;
                     }

                     //delete qs[option.value];
                     populated = true;
                 }
             });
         });
        if(qs.unreviewed_only === '1') {
            $("input[name='unreviewed_only']").prop('checked', true);
        }
        manageRecords.showOrHideMarkCheckedRecordsButton();
    };*/

     ManageSources.prototype.reloadTable = function () {
         manageSources.doSearch(false);
     };

     ManageSources.prototype.doSearch = function (isJumpSearch) {
         var manageSources = this;
         manageSources.dataTable.reload();         
     };

     ManageSources.prototype.searchAjax = function(params, dt_params, callback) {
        var manageSources = this;
        SDBM.ManageRecords.prototype.searchAjax.call(manageSources, params, dt_params, callback);
     };

    var config = {
        resourceName: "<%= resource_name %>",
        resourceNameSingular: "<%= resource_name.singularize %>",
        resourceNamePlural: "<%= resource_name.pluralize %>",
        showOnlyRecordsCreatedByUser: onlyMine,
        searchNameField: "name"
    }

     if (window.screen.width > 640) {
        config.fixedColumns = 3
     }

     var manageSources = new ManageSources(config);
     manageSources.setFormStateFromURL();
     manageSources.doSearch(false);
     data = manageSources;

     $('#search_results').on('draw.dt', function () {
        bindRemoteAjaxCallback();
     });

     // since the source-table default is 'wide', adjust the fullscreen icon
     $("#widescreen > span").toggleClass('glyphicon-resize-small').toggleClass('glyphicon-resize-full');    

 });

</script>
