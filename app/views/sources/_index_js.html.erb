<script type="text/javascript">

$(document).ready(function() {

     SDBM.setPageFullWidth();

     var resourceName = "<%= resource_name %>";

     // flag = show all records, or only those that the user created
     <% if can? :manage, model_class  %>
     var showOnlyRecordsCreatedByUser = <%= params[:created_by_user] || 0 %>;
     <% else %>
     var showOnlyRecordsCreatedByUser = 1;
     <% end %>

     <% if can? :destroy, model_class %>
     console.log('hey!');
     var canDestroy = true;
     <% else %>
     console.log('ho.');
     var canDestroy = false;
     <% end %>


     var jumpToSource = {
         search: false
     };

     // Subclass of SDBM.ManageRecords tailored for display of names (ie users)
     var ManageSources = function(options) {
         SDBM.ManageRecords.call(this, options);
     };
     
     ManageSources.prototype = Object.create(SDBM.ManageRecords.prototype);

     ManageSources.prototype.getColumns = function() {
         var manageRecords = this;

         return [
             {
                 title: '<a href="#" class="btn btn-default btn-xs glyphicon glyphicon-unchecked hideIfReviewed" id="select-all"></a>',
                 orderable: false,
                 class: "text-center",
                 /*render: function (data, type, full, meta) {
                     if(manageRecords.getUnreviewedOnly() === 1) {
                         return '<input type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '"/>';
                     }
                     return '';
                 },*/
                 render: function (data, type, full, meta) {
                    if(manageRecords.getUnreviewedOnly() === 1) {
                        return  '' + 
                                '<input class="table-checkbox" type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '" id="checkbox_' + meta.row + '"/>' + 
                                '<label for="checkbox_' + meta.row + '">' + 
                                '<a class="btn btn-default btn-xs glyphicon glyphicon-unchecked unchecked"></a>' + 
                                '<a class="btn btn-default btn-xs glyphicon glyphicon-check checked"></a>' + 
                                '</label>' + '';
//                        return '<input type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '"/>';
                    }
                    return '';
                },
                sdbmssMinWidth: "30px",
             },
             {
                 sdbmssMinWidth: "150px",
                 title: 'Options',
                 orderable: false,
                 render: function (data, type, full, meta) {
                     var str = '<span class="btn-group options-btn-group">' 
                             + '<a onclick="addBookmark(' + data + ', \'Source\');" class="btn btn-xs btn-default control-bookmark bookmark-link" in_bookmarks="/sources/' + data + '">' 
                                + '<span class="glyphicon glyphicon-bookmark"></span></a>'
                           + '<a class="btn btn-xs btn-success" href="/' + manageRecords.options.resourceName + '/' + data + '/edit/">Edit</a>' +
                           '<a class="btn btn-xs btn-primary" href="/entries/new/?source_id=' + data + '">Add an Entry</a>' +
                           (canDestroy ? '<a class="btn btn-xs btn-danger delete-link" href="/' + manageRecords.options.resourceName + '/' + data + '.json">Delete</a>' : '') +
                           '<a class="btn btn-xs btn-info" href="/sources/' + data + '/merge">Merge</a></span>';
                     // TODO: display delete link only if entries_count is 0
                     return str;
                 }
             },
             {
                 sdbmssMinWidth: "150px",
                 title: 'ID',
                 width: "10%",
                 render: function (data, type, full, meta) { 
                     var str = '<a href="/' + manageRecords.options.resourceName + '/' + data + '/">SDBM_SOURCE_' + data + '</a>';
                     return str;
                 },
                 dbSortField: 'id'
             },
             {
                 sdbmssMinWidth: "120px",
                 title: 'Source Type',
                 dbSortField: 'source_type_id'
             },
             {
                 sdbmssMinWidth: "80px",
                 title: '# Entries',
                 dbSortField: 'entries_count'
             },
             {
                 sdbmssMinWidth: "100px",
                 title: 'Date',
                 width: "10%",
                 dbSortField: 'date'
             },
             {
                 sdbmssMinWidth: "400px",
                 sdbmssMaxWidth: "400px",            
                 title: 'Title',
                 width: "70%",
                 dbSortField: 'title'
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 title: 'Author',
                 dbSortField: 'author'
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 orderable: false, // too difficult to sort by this
                 title: 'Selling Agent'
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 orderable: false, // too difficult to sort by this
                 title: 'Institution'
             },
/*             {
                 sdbmssMinWidth: "100px",
                 title: 'Has MSS',
                 dbSortField: 'whether_mss', // FIX ME: add to index, or no?
                 orderable: false
             },*/
             {
                 sdbmssMinWidth: "150px",
                 title: 'Medium',
                 dbSortField: 'medium'
             },
             {
                 sdbmssMinWidth: "100px",
                 title: "Date Accessed",
                 dbSortField: 'date_accessed',
                 orderable: false // FIX ME: add indexing or no?
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 title: "Institution",
                 dbSortField: 'location_institution'
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 title: "Location",
                 dbSortField: 'location'
             },
             {
                 sdbmssMinWidth: "200px",
                 sdbmssMaxWidth: "200px",            
                 title: "Link",
                 dbSortField: 'link',
                 orderable: false
             },
             {
                 sdbmssMinWidth: "100px",
                 sdbmssMaxWidth: "100px",            
                 title: 'Created By',
                 dbSortField: 'created_by'
             },
            {
                sdbmssMinWidth: "90px",
                sdbmssMaxWidth: "90px",
                title: 'Created On',
                dbSortField: 'created_at'
            },
            {
                sdbmssMinWidth: "90px",
                sdbmssMaxWidth: "90px",
                title: 'Updated By',
                dbSortField: 'updated_by'
            },
            {
                sdbmssMinWidth: "90px",
                sdbmssMaxWidth: "90px",
                title: 'Updated On',
                dbSortField: 'updated_at'
            }
         ];
     };

     ManageSources.prototype.searchResultToTableRow = function (result) {
         return [
             null,
             result.id,
             result.id,
             result.source_type,
             result.entries_count || 0,
             result.date,
             result.title,
             result.author,
             result.selling_agent,
             result.institution,
             //result.whether_mss,
             result.medium,
             result.date_accessed,
             result.location_institution,
             result.location,
             result.link,
             result.created_by || "",
             result.created_at || "",
             result.updated_by || "",
             result.updated_at || ""
         ];
     };

     ManageSources.prototype.getSearchFields = function () {
         var params = {};
         params["op"] = $("select[name='op']").val() || "AND";

         $(".search-fieldset").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val();
             var search_value = $(element).find("input[name='search_value']").first().val();
             if(search_value) {
                if (!params[search_field]) {
                    params[search_field] = [search_value];
                }
                else {
                    params[search_field].push(search_value);
                }
             }
         });

         if(showOnlyRecordsCreatedByUser) {
             params["created_by_user"] = 1;
         }

         return params;
     };

     ManageSources.prototype.createSearchParams = function (dt_params) {
         var params = $.extend(
             {},
             SDBM.ManageRecords.prototype.createSearchParams.call(this, dt_params),
             this.getSearchFields()
         );
         // don't send 'term'
         //delete params["term"];
         return params;
     };

     ManageSources.prototype.persistFormStateToURL = function () {
         var manageSources = this;

         var params = {
             unreviewed_only: manageSources.getUnreviewedOnly()
         };
         $(".search-fieldset").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val();
             var search_value = $(element).find("input[name='search_value']").first().val();
             if(search_value) {
                if (params[search_field]) {
                    params[search_field].push(search_value);
                } else {
                    params[search_field] = [search_value];
                }
             }
         });
         //console.log(params);
         //console.log(URI(manageSources.getResourceIndexURL()).search(params));

         return URI(manageSources.getResourceIndexURL()).search(params);
     };

    SDBM.ManageRecords.prototype.setFormStateFromURL = function() {
        var manageRecords = this;
        var qs = new URI().query(true);

         $(".search-fieldset").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first();
             var search_value = $(element).find("input[name='search_value']").first();
             var populated = false;
             search_field.children().each(function (idx, option) {
                 if(!populated && qs[option.value] && qs[option.value].length > 0) {
                     search_field.val(option.value);
                     if (Array.isArray(qs[option.value]) && qs[option.value].length > 0) {
                         search_value.val(qs[option.value].pop());
                         if (qs[option.value].length == 0) qs[option.value] = undefined;
                     } else if ( qs[option.value] != undefined ) {
                        search_value.val(qs[option.value]);
                        qs[option.value] = undefined;
                     }

                     //delete qs[option.value];
                     populated = true;
                 }
             });
         });
        if(qs.unreviewed_only === '1') {
            $("input[name='unreviewed_only']").prop('checked', true);
        }
        manageRecords.showOrHideMarkCheckedRecordsButton();
    };

     ManageSources.prototype.reloadTable = function () {
         manageSources.doSearch(false);
     };

     ManageSources.prototype.doSearch = function (isJumpSearch) {
         var manageSources = this;
         jumpToSource.search = isJumpSearch;
         manageSources.dataTable.reload();
     };

     ManageSources.prototype.searchAjax = function(params, dt_params, callback) {
         var manageSources = this;
         if(jumpToSource.search) {
             var source_id = $("#jump_to").val();
             $.ajax({
                 url: '/sources/calculate_bounds',
                 type: 'POST',
                 data: {
                     id: source_id,
                     per_page: $("select[name='search_results_length']").val(),
                 },
                 success: function(data, textStatus, jqXHR) {
                     jumpToSource.source_id = source_id;

                     params['from'] = data.lower_bound;
                     params['to'] = data.upper_bound;

                     SDBM.ManageRecords.prototype.searchAjax.call(manageSources, params, dt_params, callback);
                 },
                 error: function() {
                     SDBM.showErrorModal("#modal", "An error occurred jumping to this record.");
                 }
             });
         } else {
             SDBM.ManageRecords.prototype.searchAjax.call(manageSources, params, dt_params, callback);
         }
     };

     var manageSources = new ManageSources({
         resourceName: "<%= resource_name %>",
         resourceNameSingular: "<%= resource_name.singularize %>",
         resourceNamePlural: "<%= resource_name.pluralize %>",
         showOnlyRecordsCreatedByUser: showOnlyRecordsCreatedByUser,
         searchNameField: "name"
     });

     $('#search_results').on('draw.dt', function () {
         if(jumpToSource.search) {
             var sdbmTable = manageSources.dataTable;
             var entry_id = String(jumpToSource.source_id);
             // highlight the row
             sdbmTable.dataTable.rows().nodes().each(function (row, idx, api) {
                 var data = sdbmTable.dataTable.row(row).data();
                 if(String(data[sdbmTable.getColumnIndex("ID")]) === entry_id) {
                     $(row).addClass("selected");
                     $(".dataTables_scrollBody").scrollTop(idx * sdbmTable.getRowHeight());
                 }
             });
         }
     });

     $("#jump_to").keydown(function(e) {
         if(e.keyCode == 13) {
             manageSources.doSearch(true);
             e.preventDefault();
             return false;
         }
     });

     $("#jump_submit").click(function () {
         manageSources.doSearch(true);
         // prevent form submit handler from firing
         return false;
     });

 });

</script>
