<% content_for :head do %>
<%= stylesheet_link_tag "extras", media: "all" %>
<%= javascript_include_tag "extras" %>

<style>

/** This section contains rules copied/modified from
jquery.dataTables.css, which we don't use b/c we use
dataTables.bootstrap.css instead. Weird things happen if you use both.
*/
table.dataTable.nowrap th, table.dataTable.nowrap td {
    white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
}
table.dataTable.compact thead th,
table.dataTable.compact thead td {
  padding: 5px 9px;
}
table.dataTable.compact tfoot th,
table.dataTable.compact tfoot td {
  padding: 5px 9px 3px 9px;
}
table.dataTable.compact tbody th,
table.dataTable.compact tbody td {
  padding: 4px 5px;
}
/* end stuff from jquery.dataTables.css */

.navbar { margin-bottom: 10px; }

#main-container.container-fluid .row { padding-left: 15px; padding-right: 15px; }

#search_results { font-size: 12px; }

#search_results tbody tr.selected { background-color: #b0bed9; }

.search-fieldset { margin-bottom: 8px; }

</style>
<script type="text/javascript">

$(document).ready(function() {

    // TODO: hacks to tweak the Rails layout: figure out a more elegant way?
    $("#search-navbar").remove();
    // make this page take up full width of browser window
    $("#main-container").removeClass("container").addClass("container-fluid");

    $("input[name='search_value']").val("");

    var jumpToEntry = {
        search: false
    };
        
    var table_height_buffer = 360;
    
    var getViewportHeight = function() {
        return $(window).height();
    };

    // TODO: Blacklight might only support ordering by 1 column?
    var getSort = function(dt_params) {
        var sort;
        if(dt_params.order.length > 0) {
            var order = dt_params.order[0]
            // TODO: figure out elegant mapping of column indexes to names
            if(order.column === 1) {
                sort = "entry_id";
            } else if(order.column === 3) {
                sort = "cat_or_lot_number";
            }
            if(sort) {
                sort += " " + order.dir;
            }
        }
        if(!sort) {
            sort = "entry_id desc";
        }
        return sort;
    };

    // Translates the common parameters from dataTables widget into
    // URL params for Blacklight search
    var commonParamsTranslate = function (dt_params) {
        return {
            draw: dt_params.draw,
            page: (dt_params.start / dt_params.length) + 1,
            per_page: dt_params.length,
            utf8: String.fromCharCode(0x2713),
            search_field: "advanced",
            sort: getSort(dt_params)
        };
    };

    // Fielded search specific params
    var searchParamsTranslate = function (data) {
        params = commonParamsTranslate(data);

        params["op"] = $("select[name='op']").val();

        $("select[name='search_field']").each(function (idx, element) {
            var search_field = $(element).val();
            var search_value = $($("input[name='search_value']")[idx]).val();
            if(search_value) {
                params[search_field] = search_value;
            }
        });

        return params;
    };

    // 'Jump to' specific params
    var jumpToParamsTranslate = function (data) {
        params = commonParamsTranslate(data);

        params['entry_id'] = jumpToEntry.query;

        return params;
    };
    
    var searchAndUpdateTable = function(params, callback) {
        $.ajax({
            url: '/admin_search.json',
            data: params,
            success: function(data, textStatus, jqXHR) {
                if(!data.error) {
                    $(".dataTables_scrollBody").scrollTop(0);
                    // when paging, we probably don't want to reset horiz scroll
                    // $(".dataTables_scrollBody").scrollLeft(0);
                    callback(data);
                } else {
                    alert("An error occurred fetching search results: " + data.error);
                }
            },
            error: function() {
                // TODO: fill this out
                alert("An error occurred fetching search results");
            },
            complete: function() {
                $("#spinner").hide();
            }
        });
    };
    
    var table = $('#search_results').DataTable({
        ajax: function (dt_params, callback, settings) {
            $("#spinner").show();

            // seems like there should be a way to do this conditional
            // ajax and subsequent searchAndUpdateTable using
            // promises, but I can't figure that out right now

            if(jumpToEntry.search) {
                var entry_id = $("#jump_to").val();
                $.ajax({
                    url: '/admin_search/calculate_bounds',
                    type: 'POST',
                    data: {
                        entry_id: entry_id,
                        per_page: $("select[name='search_results_length']").val(),
                    },
                    success: function(data, textStatus, jqXHR) {
                        jumpToEntry.entry_id = entry_id;
                        jumpToEntry.query = '[' + data.lower_bound + ' TO ' + data.upper_bound + ']';

                        var params = jumpToParamsTranslate(dt_params);
                        searchAndUpdateTable(params, callback);
                    },
                    error: function() {
                        // TODO: fill this out
                        alert("An error occurred jumping to this record.");
                    }
                });
            } else {
                var params = searchParamsTranslate(dt_params);                
                searchAndUpdateTable(params, callback);
            }
        },
        columnDefs: [
            {
                "targets": 0,
                "data": null,
                "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<a href="/entries/' + full[1] + '" target="_blank">View</a>' +
                        ' <a href="/entries/' + full[1] + '/edit" target="_blank">Edit</a>' +
                        ' <a class="entry-delete-link" href="#" target="_blank">Delete</a>';
                }
            }
        ],
        language: {
            "emptyTable": "No records found for search query."
        },
        lengthMenu: [50, 100, 200, 500],
        order: [[ 1, "desc" ]],
        scrollX: true,
        scrollY: (getViewportHeight() - table_height_buffer) + "px",
        scrollCollapse: false,
        // extensions get activated via sDom codes
        sDom: 'C<"clear"><"H"lr>JRt<"F"ip>',
        serverSide: true
    });

    // this extension for fixed columns tends to mess up table redraws
    // (col headers get misaligned with col data), so we've disabled
    // it for now...
    /*
    new $.fn.dataTable.FixedColumns(table, {
        "leftColumns": 2
    });
    */

    var getRowHeight = function() {
        return $(table.rows().nodes().shift()).height();
    };
    
    var getTableHeight = function() {
        return table.rows().nodes().length * getRowHeight();
    };

    var doSearch = function(isJumpSearch) {
        jumpToEntry.search = isJumpSearch;
        table.ajax.reload();
    };
    
    $('#search_results').on('draw.dt', function () {
        if(jumpToEntry.search) {
            var entry_id = String(jumpToEntry.entry_id);
            // highlight the row
            table.rows().nodes().each(function (row, idx, api) {
                var data = table.row(row).data();
                if(String(data[1]) === entry_id) {
                    $(row).addClass("selected");
                    $(".dataTables_scrollBody").scrollTop(idx * getRowHeight());
                }
            });
        }
    });
    
    $('#search_results tbody').on('click', 'tr', function (event) {
        // don't select if a link inside table was clicked
        if(event.target.tagName !== 'A') {
            $(event.currentTarget).toggleClass('selected');
        }
    });

    $('#search_submit').click(function() {
        doSearch(false);
    });

    $("#jump_to").keydown(function(e) {
        if(e.keyCode == 13) {
            doSearch(true);
            e.preventDefault();
            return false;
        }
    });

    $("#jump_submit").click(function () {
        doSearch(true);
    });

    $(document).on("click", ".entry-delete-link", function (event) {
        var row_data = table.row($(event.target).closest("tr")).data();
        var entry_id = row_data[1];
        if(confirm("Are you sure you want to delete entry " + entry_id + "?")) {
            $.ajax({
                url: '/entries/' + entry_id,
                type: 'DELETE',
                error: function() {
                    // TODO: fill this out
                    alert("An error occurred deleting this record.");
                },
                complete: function() {
                    table.ajax.reload();
                }
            });
        }
        return false;
    });
    
    // TODO: this doesn't work
    // $(window).bind('resize', function () {
    //     console.log("RESIZED!");
    //     var NewHeight = getViewportHeight() - table_height_buffer;
    //     var oSettings = table.settings();
    //     console.log(table.settings());
    // next line is wrong: figure out where scrollY is stored?
    //     oSettings.oScroll.sY = NewHeight + "px";
    //     table.fnDraw();
    // });

});

</script>
<% end %>

<form class="form-horizontal search-form">
    <div class="row form-group search-fieldset original">
        <div class="col-sm-1">
            <label class="control-label" style="text-align: left">Search</label>
        </div>
        <div class="col-sm-4">
            <input class="form-control" name="search_value" value="" size="70" type="text">
        </div>
        <div class="col-sm-2">
            <select class="form-control" name="search_field">
            <%- search_fields_for_advanced_search.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
        </div>
        <div class="col-sm-4">
            <div>
                Match <select class="form-control" style="width: 100px; display: inline" name="op"><option value="AND">all</option><option value="OR">any</option></select>
                of these fields
            </div>
        </div>
    </div>

    <div class="row form-group search-fieldset">
        <div class="col-sm-4 col-sm-offset-1">
            <input class="form-control" name="search_value" value="" size="70" type="text">
        </div>
        <div class="col-sm-2">
            <select class="form-control" name="search_field">
            <%- search_fields_for_advanced_search.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
        </div>
    </div>

    <div class="row form-group search-fieldset">
        <div class="col-sm-4 col-sm-offset-1">
            <input class="form-control" name="search_value" value="" size="70" type="text">
        </div>
        <div class="col-sm-2">
            <select class="form-control" name="search_field">
            <%- search_fields_for_advanced_search.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
        </div>
        <div class="col-sm-1">
            <button id="search_submit" class="btn btn-primary">Search</button>
        </div>
        <div class="col-sm-1">
            <div>
                <img id="spinner" style="display: none;" src="<%= asset_path "spinner.gif" %>"/>
            </div>
        </div>
        <div class="col-sm-1 text-right">
            <label class="control-label">Jump to ID</label>
        </div>
        <div class="col-sm-1">
            <input class="form-control" type="text" id="jump_to"/>
        </div>
        <div class="col-sm-1">
            <button id="jump_submit" class="btn btn-primary">Go</button>
        </div>
    </div>

</form>

<table id="search_results" class="table dataTable table-striped table-bordered nowrap compact" width="100%" cellspacing="0">
    <thead>
        <tr>
            <!-- TODO: figure out how to get datatables to initialize
            with reasonable static widths; widget seems to
            automatically resize for data, which is not what we
            want. this might require dynamically resizing after init
            is finished? 
              -->
            <th>Actions</th>
            <th width="50">ID</th>
            <th>Manuscript</th>
            <th width="200">Source Date</th>
            <th width="200">Source Title</th>
            <th width="80">Cat or Lot #</th>
            <th width="80">Entry Date</th>
            <th>Seller Agent</th>
            <th>Seller</th>
            <th>Buyer</th>
            <th>Sold</th>
            <th>Price</th>
            <th width="200">Title</th>
            <th width="200">Author</th>
            <th width="200">Date</th>
            <th width="200">Artist</th>
            <th width="200">Scribe</th>
            <th width="200">Language</th>
            <th width="200">Material</th>
            <th width="200">Use</th>
            <th>Folios</th>
            <th width="70">Columns</th>
            <th width="60">Lines</th>
            <th width="60">Height</th>
            <th width="60">Width</th>
            <th width="60">Alt Size</th>
            <th width="60">Min Fl</th>
            <th width="60">Min Lg</th>
            <th width="60">Min Sm</th>
            <th width="60">Min Un</th>
            <th width="60">Init Hist</th>
            <th width="60">Init Dec</th>
            <th width="60">Binding</th>
            <th width="60">URL</th>
            <th width="60">Other Info</th>
            <th>Provenance</th>
            <th width="60">Added On</th>
            <th width="60">Added By</th>
            <th width="60">Last Modified</th>
            <th width="60">Last Modified By</th>
            <th width="60">Is Approved</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
