<%= javascript_include_tag "leaflet", rel: "nofollow" %>
<%= javascript_include_tag "leaflet-provider", rel: "nofollow" %>
<%= stylesheet_link_tag "leaflet", media: "all" %>
<style>
    #map {
      position: absolute;
      top: -11px;
      left: -10px;
      height: calc(100% + 31px);
      width: calc(100% + 20px);
      display: none;
      z-index: 100;
    }
    #close-map {
        position: absolute;
        top: 0px;
        right: 10px;
        z-index: 1000;
    }
    #main-container .navbar {
        z-index: 1000;
    }
    #open-map:after {
        content: "NEW!";
        position: absolute;
        top: -10px;
        right: -10px;
        color: red;
        font-weight: bold;
        font-size: 16px;
    }
    .navbar.navbar-default {
        box-shadow: 0px 2px 2px -1px #999;
    }

</style>
<script type="text/javascript">

 $(document).ready(function() {
    //$("#spinner").hide();
    
    $("#search_submit").after($("<a id='open-map' title='Map display' class='btn btn-default'><span class='glyphicon glyphicon-map-marker'></span></a>"));

    $("#search_results").after($("<div id='map'><button id='close-map' type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div>"));
    
    var map;
    $('#close-map').click(function () {
        $("#map").fadeOut();
        //$("#search_results_wrapper").show();
    });

    $("#open-map").click(function () {
        $("#map").fadeToggle();
        loadMap();
    });
    $("#search_submit").click( function () {
        $("#map").fadeOut();
    });
    
    var loadMap = function () {
        //$("#search_results_wrapper").hide();
          if (map) {
            map.off();
            map.remove();
          }

         var params = {};
         params["op"] = $("select[name='op']").val();

         $(".search-block").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val() + "[]";
             var search_value = $(element).find("input[name='search_value']").first().val();
             if (search_value == "" ) search_value = "*";
             var search_option = $(element).find("select[name='search_option']").first().val();
             var search_option_field = $(element).find("select[name='search_field']").first().val() + "_option[]";
            if (!params[search_field]) {
                params[search_field] = [search_value];
            }
            else {
                params[search_field].push(search_value);
            }

            if (!params[search_option_field]) {
                params[search_option_field] = [search_option];
            } else {
                params[search_option_field].push(search_option);
            }            
         });

         params["limit"] = 100000; // get ALL places

        $.get("/places/search.json", params, function (results) {
          $("#spinner").hide();

          map = L.map('map', {
            zoomControl: false
          });

          var sdbmIcon = L.icon({
            iconUrl: '<%= asset_path "map-pin.svg" %>',

            iconSize:     [32, 32], // size of the icon
            iconAnchor:   [16, 32], // point of the icon which will correspond to marker's location
            popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
          });

          L.control.zoom({
             position:'bottomleft'
        }).addTo(map);

          for (var i = 0; i < results.results.length; i++) {
            if (results.results[i].latitude && results.results[i].longitude) {
              var marker = L.marker([results.results[i].latitude, results.results[i].longitude], {icon: sdbmIcon, title: results.results[i].name}).addTo(map);
              marker.bindPopup("<a href='/places/" + results.results[i].id + "'>" + results.results[i].name + "</a><br><p class='text-muted'>" + results.results[i].latitude + ", " + results.results[i].longitude + "</p>").openPopup();            
            }
          }

          map.setView([60, 0], 13);        
          map.setZoom(3);

          var Stamen_TonerLite = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}', {
            attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            subdomains: 'abcd',
            minZoom: 0,
            maxZoom: 20,
            ext: 'png'
          });
          Stamen_TonerLite.addTo(map);
        });
    };

     SDBM.setPageFullWidth();

     var resourceName = "<%= resource_name %>";

     // flag = show all records, or only those that the user created
     <% if can? :manage, model_class  %>
         var onlyMine = 0;
     <% else %>
         var onlyMine = 1;
     <% end %>

     SDBM.ManageRecords.prototype.getColumns = function () {
        var manageRecords = this;

        return [
            {
                title: '<input type="checkbox" id="select-all" class="hideIfReviewed">',//'<a href="#" class="btn btn-default btn-blank btn-xs glyphicon glyphicon-unchecked hideIfReviewed" id="select-all"></a>',
                orderable: false,
                className: "text-center unreviewed_only",
                render: function (data, type, full, meta) {
                    //if(manageRecords.getUnreviewedOnly() === 1) {
                        /*return  '' + 
                                '<input class="table-checkbox" type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '" id="checkbox_' + meta.row + '"/>' + 
                                '<label for="checkbox_' + meta.row + '">' + 
                                '<a class="btn btn-default btn-xs btn-blank glyphicon glyphicon-unchecked unchecked"></a>' + 
                                '<a class="btn btn-default btn-xs btn-blank glyphicon glyphicon-check checked"></a>' + 
                                '</label>' + '';*/
                        return '<input type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '"/>';
                    //}
                    //return '';
                },
                width: "5%"
            },
            {
                title: 'Options',
                orderable: false,
                render: function (data, type, full, meta) {
                    var str = '<a class="btn btn-xs btn-success" href="/' + manageRecords.options.resourceName + '/' + data + '/edit/">Edit</a> '
                            + ' <a class="delete-link btn btn-xs btn-danger" href="/' + manageRecords.options.resourceName + '/' + data + '.json">Delete</a>';
                    return str;
                },
                width: "10%"
            },
            {
                title: 'ID',
                width: "8%",
                dbSortField: 'id',
                render: function (data, type, full, meta) {
                    // /console.log("here", data, type, full, meta);
                    var str = '<a href="/' + manageRecords.options.resourceName + '/' + data + '">' + data + '</a>';
//                    console.log(str);
                    return str;
                }
            },
            {
                title: 'Name',
                width: "45%",
                dbSortField: manageRecords.options.searchNameField
            },
            {
                title: 'Count',
                width: "10%",
                dbSortField: 'entries_count'
            },
            {
                title: 'Approved',
                width: "10%",
                dbSortField: 'reviewed'
            },
            {
                title: 'Problem',
                width: "10%",
                dbSortField: 'problem'
            },
            {
                title: 'Parent',
                width: "10%",
                dbSortField: 'parent',
                render: function (data, type, full, meta) {
                    if (data)
                        return '<a class="" href="/places/' + data.id + '" target="_blank">' + data.name + '</a> ';
                    else
                        return "";
                }
            },
            {
                title: 'Latitude',
                width: "10%",
                dbSortField: 'latitude'
            },
            {
                title: 'Longitude',
                width: "10%",
                dbSortField: 'longitude'
            },
            {
                title: 'Authority Id',
                width: "10%",
                dbSortField: 'problem',
                render: function (data, type, full, meta) {
                    if (data) {
                        var base = full[manageRecords.dataTable.getColumnIndex("Authority Source")];
                        console.log(base);
                        return '<a class="" href="' + base + '/' + data + '" target="_blank">' + data + '</a> ';
                    }
                    else
                        return "";
                }
            },
            {
                title: "Evidence",
                width: "15%",
                orderable: false
            },
            {
                title: 'Added By',
                width: "10%",
                dbSortField: 'created_by'
            },
            {
                title: 'Added On',
                width: "10%",
                dbSortField: 'created_at'
            },
            {
                title: 'Updated By',
                width: "10%",
                dbSortField: 'updated_by'
            },
            {
                title: 'Updated On',
                width: "10%",
                dbSortField: 'updated_at'
            },
            {
                title: 'Authority Source',
                width: "10%",
                dbSortField: 'problem',
                visible: false
            }
        ];
    };

    // translates a search result object into an Array used to populate datatable
    SDBM.ManageRecords.prototype.searchResultToTableRow = function (result) {
        return [ null, result.id, result.id, result[this.options.searchNameField], result.entries_count || 0, result.reviewed, result.problem, result.parent, result.latitude, result.longitude, result.authority_id, result.evidence, result.created_by || "", result.created_at || "", result.updated_by || "", result.updated_at || "", result.authority_source ];
    };

    new SDBM.ManageRecords({
        resourceName: "<%= resource_name %>",
        resourceNameSingular: "<%= resource_name.singularize %>",
        resourceNamePlural: "<%= resource_name.pluralize %>",
        showOnlyRecordsCreatedByUser: onlyMine,
        searchNameField: "name",
    });
});

</script>