<% content_for :head do %>
  <style>
    dd {
      border: none !important;
    }
    svg {
      float: right;
      z-index: -2;
    }
    path {
      fill: #aaa;
      stroke: #fff;
    }
    .point {
      fill: deepskyblue;
    }
  </style>
  <%= javascript_include_tag "data" %>
  <script type='text/javascript'>
    var projectile, circle;
    $(document).ready(function () {

      var feature;

      projection = d3.geo.azimuthal()
          .scale(380)
          .origin([-71.03,42.37])
          .mode("orthographic")
          .translate([400, 400]);

      circle = d3.geo.greatCircle()
          .origin(projection.origin());

      // TODO fix d3.geo.azimuthal to be consistent with scale
      var scale = {
        orthographic: 380,
        stereographic: 380,
        gnomonic: 380,
        equidistant: 380 / Math.PI * 2,
        equalarea: 380 / Math.SQRT2
      };

      var path = d3.geo.path()
          .projection(projection);

      var svg = d3.select("#map").append("svg:svg")
          .attr("width", 800)
          .attr("height", 800)
          .on("mousedown", mousedown);
      var point = [<%= @model.longitude %>, <%= @model.latitude %>];

      d3.json("/static/world-countries.json", function(collection) {
        if (point[0] && point[1]) {          
          collection.features.push({ "type":"Feature",
              "properties": {"name": "<%= @model.name %>"},
              "geometry": {
                "type":"Point",
                "coordinates":point},"id":"Point"});
        }
        feature = svg.selectAll("path")
            .data(collection.features)
          .enter().append("svg:path")
            .attr("d", clip).attr("class", function (d) { return d.geometry.type == "Point" ? "point" : "path"; });

        feature.append("svg:title")
            .text(function(d) { return d.properties.name; });
        
        // rotate to point
        if (point[0], point[1]) {          
          projection.origin(point);
          circle.origin(point)
          refresh();
        }
      });

      d3.select(window)
          .on("mousemove", mousemove)
          .on("mouseup", mouseup);

      d3.select("select").on("change", function() {
        projection.mode(this.value).scale(scale[this.value]);
        refresh(750);
      });

      var m0,
          o0;

      function mousedown() {
        m0 = [d3.event.pageX, d3.event.pageY];
        o0 = projection.origin();
        d3.event.preventDefault();
      }

      function mousemove() {
        if (m0) {
          var m1 = [d3.event.pageX, d3.event.pageY],
              o1 = [o0[0] + (m0[0] - m1[0]) / 8, o0[1] + (m1[1] - m0[1]) / 8];
          projection.origin(o1);
          circle.origin(o1)
          refresh();
        }
      }

      function mouseup() {
        if (m0) {
          mousemove();
          m0 = null;
        }
      }

      $("#center").click(function () {      
        if (point[0], point[1]) {
          var start_projection = projection.origin();
          var start_circle = circle.origin();
          var start_time = new Date();
          var t = 0;
          var interval = setInterval(function () {
            var new_time = new Date();
            var dt = (new_time - start_time) / 1000;
            t += dt;
            projection.origin([
              start_projection[0] + t * (point[0] - start_projection[0]),
              start_projection[1] + t * (point[1] - start_projection[1])
            ]);
            circle.origin([
              start_circle[0] + t * (point[0] - start_circle[0]),
              start_circle[1] + t * (point[1] - start_circle[1])
            ]);
            if (t >= 1) {
              clearInterval(interval);
              circle.origin(point);
              projection.origin(point);
            }
            refresh();
          }, 10);
        }
      });

      function refresh(duration) {
        (duration ? feature.transition().duration(duration) : feature).attr("d", clip);
      }

      function clip(d) {
        return path(circle.clip(d));
      }

    });
  </script>
<% end %>

<% content_for :breadcrumbs do %>
  <%= render partial: "manage_models/breadcrumbs", locals: {edit: false} %>
<% end %>

<% content_for :control_tools do %>
  <%= render partial: "manage_models/tools" %>
<% end %>

<% if @model.problem %>
  <div class="alert alert-danger"><span class="lead"><span class="glyphicon glyphicon-warning-sign"></span> Warning!</span> This <%= @model.class.name %> has been flagged as problematic because the purpose or data recorded is uncertain. Use only if you have no other options. If you have information to help us better identify this <%= @model.class.name %>, please leave a comment.</div>
<% end %>

<% if !@model.reviewed %>
  <div class="alert alert-warning"><span class="glyphicon glyphicon-info-sign"></span> This <%= @model.model_name.to_s %> has not yet been reviewed and may not conform to our data standards.</div>
<% end %>

<div class="row">
  <div class="col-sm-6 pull-right" id="map">

  </div>  
  <div class="col-sm-6">
    <dl class="document-show-heading dl-horizontal dl-invert">
        <dt></dt>
        <dd class='h2'><%= @model.public_id %></dd>
    </dl>

    <dl class="document-metadata dl-horizontal dl-invert">
      <dt>Name</dt>
      <dd>
          <%= @model.name %>
      </dd>
      <dt># Entries</dt>
      <dd>
          This <%= @model.class.to_s.underscore %> was used in <a href="<%= search_by_facet_value(@model.class.to_s.underscore, @model.name) %>" class="badge"><%= SDBMSS::Util.to_many(@model.entries_count, "entry") %></a>
      </dd>
      <dt>Parent</dt>
      <dd>
        <span class="glyphicon glyphicon-globe"></span>
        <% if @model.parent %>
          <%= render partial: "parent", locals: {model: @model } %>        
        <% else %>
          <span class="text-muted">This place has no parent set.</span>
        <% end %>
      </dd>
      <dt>
        Coordinates
        <span class="glyphicon glyphicon-map-marker" id="center"></span>
      </dt>
      <dd><%= @model.latitude ? @model.latitude.to_f : "?" %>, <%= @model.longitude ? @model.longitude.to_f : "?" %></dd>
      <dt>Place Authority</dt>
      <dd>
        <% if @model.authority_id %>
          <%= link_to "#{@model.authority_id}", "#{@model.authority_source}/#{@model.authority_id}" %>
        <% else %>
          <span class="text-muted">This place is linked to no exteral authority yet.</span>
        <% end %>
      </dd>
    </dl>

    <%= render partial: "shared/user_info", locals: {model: @model} %>

  </div>  
</div>