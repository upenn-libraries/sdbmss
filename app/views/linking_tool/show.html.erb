<% content_for :head do %>
  <%= stylesheet_link_tag "extras", media: "all" %>
  <%= javascript_include_tag "extras" %>
  <style>
    .form-inline .input-group > .form-control {
        width: auto;
    }
    .linking-tool-link {
        line-height: 36px;
        margin: 0px 10px;
    }
  </style>
<script type="text/javascript">

function setOptions (p) {
    var t = p.find("select[name=search_field]");
    var updateOptions = function (e) {
        var type = t.find("option:selected").attr("type");
        p.find(".option").hide();
        //p.find(".option").attr("selected", false);
        p.find("." + type + "_option").show();
        var results = p.find('.' + type + '_option:selected');
        if (results.length > 0) {
            // nothing -> if there's already a 'valid' selected filter option
        } else {
            p.find("." + type + "_option").first().attr("selected", true);            
            // redundancy for FIREFOX, set value as well as 'selected'
            var val = p.find("." + type + "_option").first().val();
            p.find("select[name=search_option]").val(val);
        }
    };
    p.find("select[name=search_option]").change( function () {
        if ($(this).val() == "blank" || $(this).val() == "not blank") {
            $(this).closest('.search-block').find('input[name=search_value]').val("").attr('disabled', true);
        } else {
            $(this).closest('.search-block').find('input[name=search_value]').attr('disabled', false);
        }
    });
    t.change(updateOptions);
    updateOptions();
}

$(document).ready(function() {
    $("#addSearch").click( function (e) {
        // fix me: add something here to dynamically change table height -> 
        var p = $('.search-block').eq(0).clone();
        p.find('.form-submission').remove();
        p.find("input", "select").val("");
        $(".search-fieldset").append(p);
        p.find(".search-remove").click( function (e) {
            //var p = $(this).closest('.search-block');
            if ($('.search-block').length > 1) {
                $(".search-fieldset").find(p).remove();            
            } else {                                    // otherwise, clear all the fields
                p.find("input").each(function (e) {
                    $(this).val("");
                })
                p.find("select[name=search_field]").find("option").first().attr("selected", true).change();
            }
        });
        setOptions(p);
    });
    var p = $('.search-block').eq(0);
    p.find(".search-remove").click( function (e) {
        if ($('.search-block').length > 1) {     // if there are others, remove it
            p = $(this).closest('.search-block');
            $(".search-fieldset").find(p).remove();
        } else {                                    // otherwise, clear all the fields
            p.find("input").each(function (e) {
                $(this).val("");
            })
            p.find("select[name=search_field]").find("option").first().attr("selected", true).change();
        }
    });
    setOptions(p);

    SDBM.setPageFullWidth();

    var mode = '<%= @mode %>';
    var entryId;
    var manuscriptId;
    var manuscriptCreatedBy;
    var entryManuscripts;
    var headingId = '<%= @mode == 'by_entry' ? @entry.public_id : @manuscript.public_id %>';

    var unsavedChanges;
    var changed = [];

    function setUnsavedChanges(truth) {
        unsavedChanges = truth;
        if (unsavedChanges == false) {
            $("#persist-entries-manuscript-link").addClass('disabled');
        } else {
            $("#persist-entries-manuscript-link").removeClass('disabled');
        }
    }
    setUnsavedChanges(false);

    <% if (@manuscript && can?(:unlink, @manuscript)) || (@entry && can?(:unlink, @entry)) %>
        var canUnlink = true
    <% else %>
        var canUnlink = false;
        var username = '<%= current_user.username %>';
    <% end %>
    
    <% if @mode == 'by_entry' %>
    entryId = <%= @entry.id %>;
    entryManuscripts = [
        {
            entry_id: entryId,
            relation_type: 'is'
        }
    ];
    <% else %>
    manuscriptId = <%= @manuscript.id %>;
    manuscriptCreatedBy = '<%= @manuscript.created_by %>';
    cumulativeUpdatedAt = <%= @manuscript.cumulative_updated_at %>;
    entryManuscripts = <%= JSON.generate(@manuscript.entry_manuscripts.map { |entry_manuscript|
                                                                            {
                                                                             id: entry_manuscript.id,
                                                                             entry_id: entry_manuscript.entry_id,
                                                                             manuscript_id: entry_manuscript.manuscript_id,
                                                                             relation_type: entry_manuscript.relation_type
                                                                             }
                                                                            }).html_safe %>;
    <% end %>

    var getActiveEntryManuscripts = function() {
        return entryManuscripts.filter(function (entry_manuscript) {
            return true;//!entry_manuscript._destroy;
        });
    };

    var entryIdAlreadyExistsInWorkspace = function(entryId) {
        var idAlreadyExists = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId) {
                idAlreadyExists = true;
            }
        });
        return idAlreadyExists;
    };

    var addWorkspaceEntry = function(entryId, relation) {
        if (!entryIdAlreadyExistsInWorkspace(entryId)) {
            entryManuscripts.push({
                entry_id: entryId,
                relation_type: relation,
                changed: true
            });
            setUnsavedChanges(true);
            //changes.push(entryId);
        }
    };

    var changeWorkspaceEntry = function (entryId, relation) {
        if(true) {//relation != 'unlink') {
            if (!entryIdAlreadyExistsInWorkspace(entryId)) { // does this ever happen?
                entryManuscripts.push({
                    entry_id: entryId,
                    relation_type: relation
                });
            } else {
                $.each(entryManuscripts, function (idx, workspaceEntry) {
                    if(workspaceEntry.entry_id == entryId) {
                        if (relation == 'unlink') {
                            workspaceEntry._destroy = 1;
                        } else {
                            delete workspaceEntry._destroy;                           
                        }
                        workspaceEntry.relation_type = relation;
                        workspaceEntry.changed = true;
                    }
                });
            }
        } else {
            //deleteWorkspaceEntry(entryId);            
        }
        //changes.push(entryId);
        setUnsavedChanges(true);
    };
/*
    var deleteWorkspaceEntry = function(entryIdToDelete) {
        // FIX ME - what is the purpose of this?
        if(mode == 'by_entry' && entryId == entryIdToDelete) {
            SDBM.showErrorModal("#modal", "You can't unlink the main entry.");
            return;
        }

        // FIX ME - should the last entry be removeable?  I think it should...
        if(getActiveEntryManuscripts().length < 1) {
            SDBM.showErrorModal("#modal", "You can't unlink that record. There must be at least one entry in the table.");
            return;
        }
        
        var idxToDelete = -1;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryIdToDelete) {
                idxToDelete = idx;
            }
        });
        if (idxToDelete != -1) {
            if(entryManuscripts[idxToDelete].id) {
                entryManuscripts[idxToDelete]._destroy = 1;
            } else {
                entryManuscripts.splice(idxToDelete, 1);
            }
        }
        setUnsavedChanges(true);
    };*/

    var isInWorkspace = function(entryId, relationType) {
        var inWorkspace = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId && workspaceEntry.relation_type == relationType) {
                inWorkspace = true;
            }
        });
        return inWorkspace;
    };
    
    var potentialMatches = null;

    var getRadioButtonHTML = function(sdbmTable, data, value) {
        var entryId = data[sdbmTable.getColumnIndex("ID")];
        var checked = isInWorkspace(entryId, value) ? "checked='checked'" : "";
        return '<input type="radio" class="toggle-entry-link" data-entry-id="' + entryId + '" name="entry_id_' + entryId + '" value="' + value + '" ' + checked + '/>';
    };

    var getButtonHTML = function(sdbmTable, data, value) {
        var entryId = data[sdbmTable.getColumnIndex("ID")];
        //var checked = isInWorkspace(entryId, value) ? "checked='checked'" : "";
        return '<a class="btn btn-danger btn-xs toggle-entry-link" data-entry-id="' + entryId + '" name="entry_id_' + entryId + '" value="' + value + '" >Unlink</a>';
    };

    // Fielded search specific params
    var translateSearchParams = function (sdbmTable, data) {
         return $.extend(
             {},
             sdbmTable.translateParamsToBlacklight(data),
             getSearchFields()
         );
     };

    var getSearchFields = function () {
         var params = {};
         params["op"] = $("select[name='op']").val();

         $(".search-block").each(function(idx, element) {
             var search_field = $(element).find("select[name='search_field']").first().val() + "[]";
             var search_value = $(element).find("input[name='search_value']").first().val();
             if (search_value == "" ) search_value = "*";
             var search_option = $(element).find("select[name='search_option']").first().val();
             var search_option_field = $(element).find("select[name='search_field']").first().val() + "_option[]";
            if (!params[search_field]) {
                params[search_field] = [search_value];
            }
            else {
                params[search_field].push(search_value);
            }

            if (!params[search_option_field]) {
                params[search_option_field] = [search_option];
            } else {
                params[search_option_field].push(search_option);
            }            
         });
         return params;
     };

    var workspaceTable = new SDBM.EntryTable("#workspace", {
        dom: '<"clear">JRt',
        height: '135px',
        fixedColumns: 5,
        prependColumns: [
            {
                sdbmssMinWidthImportant: "50px",
                title: 'Link',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "is");
                }
            },
            {
                sdbmssMinWidthImportant: "60px",
                title: 'Fragment',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "partial");
                }
            },
            {
                sdbmssMinWidthImportant: "60px",
                title: 'Possible',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "possible");
                }
            },
            {
                sdbmssMinWidthImportant: "50px",
                title: 'Unlink',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    if (canUnlink)
                        return getRadioButtonHTML(workspaceTable, data, "unlink");
                    else if (username == data[workspaceTable.getColumnIndex("Added By")] || username == manuscriptCreatedBy) {
                        return getRadioButtonHTML(workspaceTable, data, "unlink");
                    }               
                    else
                        return '<span class="text-danger">n/a</span>';
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            var params = sdbmTable.translateParamsToBlacklight(dt_params);

            //params["approved"] = "";

            params.entry_id = getActiveEntryManuscripts().length > 0 ? $.map(getActiveEntryManuscripts(), function(item) { return item.entry_id; }) : ['nil'];
            
            // prevent an empty workspace from returning ALL entries
            if (getActiveEntryManuscripts().length > 0)
                params.op = "OR";
            else
                params.op = "AND";

            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();  
                }
            });
        }
    });

    var resultsTable = new SDBM.EntryTable("#search_results", {
        dom: '<"clear"><"H linking_table_header"<"row"<"col-sm-3"l><"col-sm-9 text-right"<"spinner">rip>>>JRt<"F">',
        //dom: '<"row"<"col-sm-5"li><"col-sm-7 text-right" p<"btn-group btn-table-tool"<"wide"><"csv"><"columns">J>>>t',
        height: function() {
            // height gets passed into dataTables constructor before
            // it's had a chance to construct all its crazy DOM bits,
            // so it's hard to calculate height dynamically to fit the
            // viewport. This seems pretty decent.
            // FIX ME: doesn't work, though -> when the window is too small, the right part (search results) just don't appear
            var footer_size = 100;
            var minimum_height = 300;
            return Math.max(minimum_height, $(window).height() - $("#search_results").offset().top - footer_size);
        },
        fixedColumns: 2,
        prependColumns: [
            {
                sdbmssMinWidthImportant: "255px",
                title: 'Options',
                "data": null,
                "orderable": false,
                "render": function (data, type, full, meta) {
                    var entryId = data[resultsTable.getColumnIndex("ID")];
                    var manuscriptId = data[resultsTable.getColumnIndex("Manuscript")];
                    if(mode == 'by_entry') {
                        if(manuscriptId) {
                            return '<a href="#" data-manuscript-id="' + manuscriptId + '" class="link-to-manuscript-link">Link to SDBM_MS_' + manuscriptId + '</a>';
                        } else {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add to queue</a>';
                        }
                    } else {
                        if(!manuscriptId) {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add SDBM_' + entryId + ' to manuscript record</a>';
                        }
                    }
                    return "";
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            // seems like there should be a way to do this conditional
            // ajax and subsequent searchAndUpdateTable using
            // promises, but I can't figure that out right now
            var params = translateSearchParams(sdbmTable, dt_params); 
            params["approved"] = "*";
            params["deprecated"] = "false";
            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();
                    // FIX ME: for some reason, radiobuttons do not appear on first load of workspacetable -> this is a hacky fix to make them do that :/
                    workspaceTable.reload();
                }
            });
        }
    });

//    $("#search_results").wrap("<div id='scrollTop'></div>");
//    $('#scrollTop').doubleScroll();

    var doSearch = function() {
        potentialMatches = null;
        resultsTable.reload();
    };

    // TODO: fix row highlighting broken by fixed column datatable plugin

    $("#link-search").submit(function (e) {
        e.preventDefault();
        doSearch();
        return false;
    });

    $('#search_submit').click(function() {
        doSearch();
    });

    $("#addSearch").click( function (e) {
        var p = $('.search-fieldset').eq(0).clone();
        p.find("input", "select").val("");
        $(".search").append(p);
        p.find(".search-remove").click( function (e) {
            var p = $(this).closest('.search-fieldset');
            if ($('.search-fieldset').length > 1) {
                $(".search").find(p).remove();
            } else {                                    // otherwise, clear all the fields
                p.find("input").each(function (e) {
                    $(this).val("");
                })
                p.find("select[name=search_field]").find("option").first().attr("selected", true).change();
            }
        });
        setOptions(p);      
    });

    $(document).on("click", ".add-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        addWorkspaceEntry(entryId, "is");
        workspaceTable.reload(highlightRows); 
        return false;
    });

    $(document).on("click", ".toggle-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        var value = $(event.target).val();
        changeWorkspaceEntry(entryId, value);
        workspaceTable.reload(highlightRows); 
        return false;
    });

    function highlightRows() {
        var deleted = 0, changed = 0;
        for (var i = 0; i < entryManuscripts.length; i++) {
            if (!entryManuscripts[i].changed) {}
            else if (entryManuscripts[i]._destroy) {
                $('#workspace_wrapper td[title="SDBM_' + entryManuscripts[i].entry_id + '"]').parent('tr').removeClass('linking-tool-changed').addClass('linking-tool-deleted');
                deleted += 1;
            } else {
                $('#workspace_wrapper td[title="SDBM_' + entryManuscripts[i].entry_id + '"]').parent('tr').removeClass('linking-tool-deleted').addClass('linking-tool-changed');
                changed += 1;
            }
        }
        $("#changes").text(changed + " changed");        
        $("#deletes").text(deleted + " deleted");
    }

    $(document).on("click", ".link-to-manuscript-link", function (event) {

        var linktomss = function() {
            var manuscriptId = $(event.target).data("manuscriptId");
            // create a single EntryManuscript record
            $.ajax({
                url: "/entry_manuscripts.json",
                type: 'POST',
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify({
                    entry_manuscript: {
                        manuscript_id: manuscriptId,
                        entry_id: entryId,
                        relation_type: 'is',
                    }
                }),
                success: function(data, textStatus, jqXHR) {
                    window.location = "/linkingtool/manuscript/" + manuscriptId;
                    /*var title = "Successfully Linked";
                    var body = '<p>Link between SDBM_' + entryId + ' and SDBM_MS_' + manuscriptId + ' successfully created.</p>' +
                               '<p><a class="manuscript-link" href="/linkingtool/manuscript/' + manuscriptId + '">Go to page for SDBM_MS_' + manuscriptId + ' now</a></p>';

                    setUnsavedChanges(false);
                    SDBM.showModal("#modal", {
                        allowDismiss: false,
                        showFooter: false,
                        title: title,
                        body: body
                    });*/
                },
                error: function(xhr) {
                    var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                    SDBM.showErrorModal("#modal", error);
                }
            });
        }
        
        if (!unsavedChanges) {
            linktomss();
        } else {
            dataConfirmModal.confirm({
                title: 'Confirm',
                text: "You have unsaved changes that will be lost - continue?",
                commit: 'Yes',
                cancel: 'Cancel',
                zIindex: 10099,
                onConfirm: function() { 
                    linktomss();
                },
                onCancel:  function() { }
            });
        }

        return false;
    });


    $("#persist-entries-manuscript-link").click(function (event) {
        if(mode == 'by_entry') {
            if(entryManuscripts.length > 0) {
                // create a Manuscript and its EntryManuscripts
                $.ajax({
                    url: '/manuscripts.json',
                    type: 'POST',
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify({
                        manuscript: {
                            entry_manuscripts_attributes: entryManuscripts
                        }
                    }),
                    success: function(data, textStatus, jqXHR) {
                        unsavedChanges = false;
                        window.location = '/linkingtool/manuscript/' + data.id;
                    },
                    error: function(xhr) {
                        var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                        SDBM.showErrorModal("#modal", error);
                    }
                });
            } else {
                SDBM.showErrorModal("#modal", "Creating a Manuscript requires at least 1 entry. Queue some entries and try again.");
            }
        } else {
            $.ajax({
                contentType: 'application/json',
                url: '/entry_manuscripts/update_multiple.json',
                type: 'PUT',
                dataType: 'json',
                data: JSON.stringify({
                    manuscript_id: manuscriptId,
                    cumulative_updated_at: cumulativeUpdatedAt,
                    entry_manuscripts: entryManuscripts
                }),
                success: function(data, textStatus, jqXHR) {
                    unsavedChanges = false;
                    window.location = '/linkingtool/manuscript/' + manuscriptId
                },
                error: function(xhr) {
                    var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                    SDBM.showErrorModal("#modal", error);
                }
            });
        }
        return false;
    });

    $("#show-matches").click(function () {
        $("#spinner").show();

        var url, key;
        if(mode == 'by_entry') {
            url = '/entries/' + entryId + '/similar.json',
            key = 'similar';
        } else {
            url = '/manuscripts/' + manuscriptId + '/entry_candidates.json',
            key = 'entry_candidates';
        }

        $.ajax({
            url: url,
            type: 'GET',
            success: function(data, textStatus, jqXHR) {
                if(data[key] && data[key].length > 0)  {
                    potentialMatches = data[key];
                    resultsTable.reload();
                } else {
                    SDBM.showModal("#modal", {
                        title: "No matches found",
                        body: "No matches found"
                    });
                }
            },
            error: function(xhr) {
                var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                SDBM.showErrorModal("#modal", error);
            },
            complete: function() {
                $("#spinner").hide();
            }
        });
    });

    $("#show-more-search-fields-link").click(function() {
        if($("#show-more-search-fields-link").text().match(/Show/)) {
            $("#show-more-search-fields-link").text("Hide additional search fields");
            $(".more-search-fields").show();
        } else {
            $("#show-more-search-fields-link").text("Show more search fields");
            $(".more-search-fields").hide();
        }
        return false;
    });
    
    $('#workspace_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#search_results_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    $('#search_results_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#workspace_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    
    $("#linking-tool-heading-id").text(headingId);
    $("#workspace-table-title").text(
        mode == 'by_entry' ? "Entry Queue for creating Links" : "Entries for " + headingId);
    $("#persist-entries-manuscript-link").text(
        mode == 'by_entry' ? "Create Manuscript Record" : "Save changes");

    $(".sdbmss-has-tooltip").each(function(idx, element) {
        var template = $(element).data("tooltip-template");
        SDBM.registerTooltip(element, template);
        $(element).click(function() {
            return false;
        });
    });

    $(window).bind('beforeunload', function() {
        if (unsavedChanges) {
            return "You have unsaved changes";
        }
    });

});

</script>
<% end %>

<div class="row">
    <div class="col-sm-12">
        <h4><a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_<%= @mode %>_instructions" href="#">Click here for instructions</a> on how to link entries to manuscript records</h4>
        <% if @mode == 'by_entry' %>
            <p>This page allows you to create a <b>manuscript record</b> from this entry by linking it to one or more existing entries citing the same manuscript, in order to track its transmission and location across time.  You may create a manuscript record with one entry if you cannot find other entries to link to a single entry.</p>
            <p>If a <b>manuscript record</b> already exists, you can simply link this entry to it. Use the search window below to find other possible links and enter them in the entry queue to help determine whether a link really exists.</p>
        <% else %>
            <p>This page allows you to link <strong>entries</strong> to an <strong>existing manuscript record</strong>. You can link entries citing the same manuscript to track its transmission and location across time. Use the search window below to find possible links and enter them in the Entry Queue to help determine whether a link really exists.</p>
        <% end %>
    </div>
</div>
<% content_for :add_entry do %>
    <% if @entry %>
        <li>
            <%= link_to(new_source_path({create_entry: 1, new_manuscript: true, original_entry: @entry.id, source_type: 4})) do %>
                <span class="glyphicon glyphicon-plus"></span> Create Linked Personal Observation
            <% end %>
        </li>
    <% elsif @manuscript %>
        <li>
            <%= link_to(new_source_path({create_entry: 1, manuscript_id: @manuscript.id, source_type: 4})) do %>
                <span class="glyphicon glyphicon-plus"></span> Create Linked Personal Observation
            <% end %>
        </li>
    <% end %>
<% end %>

<% content_for :breadcrumbs do %>
    <% if @entry %>
        <li class=" "><%= link_to "Manage Entries", entries_path %></li>
        <li class=" "><%= link_to @entry.public_id, entry_path(@entry) %></li>
        <li class="  active"><a href="">Linking tool for <%= @entry.public_id %></a></li>
    <% elsif @manuscript %>
        <li class=" "><%= link_to "Manage Manuscripts", manuscripts_path %></li>
        <li class=" "><%= link_to @manuscript.public_id, manuscript_path(@manuscript) %></li>
        <li class="  active"><a href="">Linking tool for <%= @manuscript.public_id %></a></li>
    <% end %>    
<% end %>
<div id="linking-tool">
    <div style="margin-bottom: 6px">
        <span style="font-size: 14px; font-weight: bold;"><span id="workspace-table-title"></span></span>
        <button id="persist-entries-manuscript-link" class="btn btn-primary btn-xs" style="margin-left: 40px"></button>
        <span class="text-success bg-success linking-tool-change-info" id="changes">0 changed</span>
        <span class="text-danger bg-danger linking-tool-change-info" id="deletes">0 deleted</span>
    </div>

    <table id="workspace" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
        <thead>
            <tr>
                <!-- we populate TH elements dynamically -->
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <nav class="navbar navbar-default" style="margin: 10px 0px 9px 0px;">
        <div class="row">
            <div class="col-sm-12">
                <ul class="nav navbar-nav navbar-left navbar-nav-search">
                     <li>
                        <a class="sdbmss-has-tooltip linking-tool-link" data-tooltip-template="linking_tool_search_tips" href="#"><span class="glyphicon glyphicon-search"></span> Search Tips</a>
                    </li>
                </ul>
                <%= form_tag(request.path, method: :get, id: "link-search") do %>
                <%= render partial: "linking_tool/show_form" %>                    
                <% end %>
            </div>
        </div>
    </nav>
    <table id="search_results" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
        <thead>
            <tr>
                <!-- we populate TH elements dynamically -->
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>