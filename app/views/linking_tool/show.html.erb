<% content_for :head do %>
<%= stylesheet_link_tag "extras", media: "all" %>
<%= javascript_include_tag "extras" %>
<script type="text/javascript">

$(document).ready(function() {

    SDBM.setPageFullWidth();

    var mode = '<%= @mode %>';
    var entryId;
    var manuscriptId;    
    var entryManuscripts;
    var headingId = '<%= @mode == 'by_entry' ? @entry.public_id : @manuscript.public_id %>';
    
    <% if @mode == 'by_entry' %>
    entryId = <%= @entry.id %>;
    entryManuscripts = [
        {
            entry_id: entryId,
            relation_type: 'is'
        }
    ];
    <% else %>
    manuscriptId = <%= @manuscript.id %>;
    cumulativeUpdatedAt = <%= @manuscript.cumulative_updated_at %>;
    entryManuscripts = <%= JSON.generate(@manuscript.entry_manuscripts.map { |entry_manuscript|
                                                                            {
                                                                             id: entry_manuscript.id,
                                                                             entry_id: entry_manuscript.entry_id,
                                                                             manuscript_id: entry_manuscript.manuscript_id,
                                                                             relation_type: entry_manuscript.relation_type
                                                                             }
                                                                            }).html_safe %>;
    <% end %>

    var getActiveEntryManuscripts = function() {
        return entryManuscripts.filter(function (entry_manuscript) {
            return !entry_manuscript._destroy;
        });
    };

    var entryIdAlreadyExistsInWorkspace = function(entryId) {
        var idAlreadyExists = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId) {
                idAlreadyExists = true;
            }
        });
        return idAlreadyExists;
    };

    var addWorkspaceEntry = function(entryId, relation) {
        if (!entryIdAlreadyExistsInWorkspace(entryId)) {
            entryManuscripts.push({
                entry_id: entryId,
                relation_type: relation
            });
        }
    };

    var changeWorkspaceEntry = function (entryId, relation) {
        if(relation != 'unlink') {
            if (!entryIdAlreadyExistsInWorkspace(entryId)) {
                entryManuscripts.push({
                    entry_id: entryId,
                    relation_type: relation
                });
            } else {
                $.each(entryManuscripts, function (idx, workspaceEntry) {
                    if(workspaceEntry.entry_id == entryId) {
                        workspaceEntry.relation_type = relation;
                    }
                });
            }
        } else {
            deleteWorkspaceEntry(entryId);            
        }
    };

    var deleteWorkspaceEntry = function(entryIdToDelete) {
        if(mode == 'by_entry' && entryId == entryIdToDelete) {
            SDBM.showErrorModal("#modal", "You can't unlink the main entry.");
            return;
        }

        if(getActiveEntryManuscripts().length == 1) {
            SDBM.showErrorModal("#modal", "You can't unlink that record. There must be at least one entry in the table.");
            return;
        }
        
        var idxToDelete = -1;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryIdToDelete) {
                idxToDelete = idx;
            }
        });
        if (idxToDelete != -1) {
            if(entryManuscripts[idxToDelete].id) {
                entryManuscripts[idxToDelete]._destroy = 1;
            } else {
                entryManuscripts.splice(idxToDelete, 1);
            }
        }
    };

    var isInWorkspace = function(entryId, relationType) {
        var inWorkspace = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId && workspaceEntry.relation_type == relationType) {
                inWorkspace = true;
            }
        });
        return inWorkspace;
    };
    
    var potentialMatches = null;

    var getRadioButtonHTML = function(sdbmTable, data, value) {
        var entryId = data[sdbmTable.getColumnIndex("ID")];
        var checked = isInWorkspace(entryId, value) ? "checked='checked'" : "";
        return '<input type="radio" class="toggle-entry-link" data-entry-id="' + entryId + '" name="entry_id_' + entryId + '" value="' + value + '" ' + checked + '/>';
    };

    // Fielded search specific params
    var translateSearchParams = function (sdbmTable, data) {
        params = sdbmTable.translateParamsToBlacklight(data);

        if(potentialMatches == null) {
            params["op"] = $("select[name='op']").val();

            $("select[name='search_field']").each(function (idx, element) {
                var search_field = $(element).val();
                var search_value = $($("input[name='search_value']")[idx]).val();
                if(search_value) {
                    params[search_field] = search_value;
                }
            });
        } else {
            params["entry_id"] = potentialMatches.join(" OR ");
        }
        
        return params;
    };

    var workspaceTable = new SDBM.EntryTable("#workspace", {
        dom: '<"clear">JRt',
        height: '135px',
        fixedColumns: 5,
        prependColumns: [
            {
                sdbmssMinWidth: "50px",
                title: 'Link',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "is");
                }
            },
            {
                sdbmssMinWidth: "60px",
                title: 'Fragment',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "partial");
                }
            },
            {
                sdbmssMinWidth: "60px",
                title: 'Possible',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "possible");
                }
            },
            {
                sdbmssMinWidth: "50px",
                title: 'Unlink',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "unlink");
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            var params = sdbmTable.translateParamsToBlacklight(dt_params);

            params["approved"] = "*";
            params.entry_id = $.map(getActiveEntryManuscripts(), function(item) { return item.entry_id; }).join(" OR ");

            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();
                }
            });
        }
    });

    var resultsTable = new SDBM.EntryTable("#search_results", {
        dom: '<"clear"><"H"r>JRt<"F"ip>',
        height: function() {
            // height gets passed into dataTables constructor before
            // it's had a chance to construct all its crazy DOM bits,
            // so it's hard to calculate height dynamically to fit the
            // viewport. This seems pretty decent.
            var footer_size = 100;
            return $(window).height() - $("#search_results").offset().top - footer_size;
        },
        fixedColumns: 2,
        prependColumns: [
            {
                sdbmssMinWidth: "255px",
                title: 'Options',
                "data": null,
                "orderable": false,
                "render": function (data, type, full, meta) {
                    var entryId = data[resultsTable.getColumnIndex("ID")];
                    var manuscriptId = data[resultsTable.getColumnIndex("Manuscript")];
                    if(mode == 'by_entry') {
                        if(manuscriptId) {
                            return '<a href="#" data-manuscript-id="' + manuscriptId + '" class="link-to-manuscript-link">Link to SDBM_MS_' + manuscriptId + '</a>';
                        } else {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add to queue</a>';
                        }
                    } else {
                        if(!manuscriptId) {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add this entry to manuscript record</a>';
                        }
                    }
                    return "";
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            // seems like there should be a way to do this conditional
            // ajax and subsequent searchAndUpdateTable using
            // promises, but I can't figure that out right now
            
            var params = translateSearchParams(sdbmTable, dt_params);                
            params["approved"] = "*";
            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();
                }
            });
        }
    });

    var doSearch = function() {
        potentialMatches = null;
        resultsTable.reload();
    };

    // TODO: fix row highlighting broken by fixed column datatable plugin

    $('#search_submit').click(function() {
        doSearch();
    });

    $(document).on("click", ".add-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        addWorkspaceEntry(entryId, "is");
        workspaceTable.reload();
        return false;
    });

    $(document).on("click", ".toggle-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        var value = $(event.target).val();
        changeWorkspaceEntry(entryId, value);
        workspaceTable.reload();
        return false;
    });

    $(document).on("click", ".link-to-manuscript-link", function (event) {
        var manuscriptId = $(event.target).data("manuscriptId");

        $.ajax({
            url: "/entry_manuscripts.json",
            type: 'POST',
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify({
                entry_manuscript: {
                    manuscript_id: manuscriptId,
                    entry_id: entryId,
                    relation_type: 'is',
                }
            }),
            success: function(data, textStatus, jqXHR) {
                var title = "Successfully Linked";
                var body = '<p>Link between SDBM_' + entryId + ' and SDBM_MS_' + manuscriptId + ' successfully created.</p>' +
                           '<p><a class="manuscript-link" href="/linkingtool/manuscript/' + manuscriptId + '">Go to page for SDBM_MS_' + manuscriptId + ' now</a></p>';

                SDBM.showModal("#modal", {
                    allowDismiss: false,
                    showFooter: false,
                    title: title,
                    body: body
                });
            },
            error: function() {
                // TODO: fill this out
                alert("An error occurred creating a manuscript.");
            }
        });

        return false;
    });

    $("#persist-entries-manuscript-link").click(function (event) {
        if(mode == 'by_entry') {
            if(entryManuscripts.length > 1) {
                $.ajax({
                    url: '/manuscripts.json',
                    type: 'POST',
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify({
                        entry_manuscripts: entryManuscripts
                    }),
                    success: function(data, textStatus, jqXHR) {
                        var body = "<p>Manuscript record SDBM_MS_" + data.manuscript_id + " successfully created!</p><p><a href='/linkingtool/manuscript/" + data.manuscript_id + "'>Click here</a> to add more or edit links to SDBM_MS_" + data.manuscript_id + "</p><p>or</p><p><a href='/dashboard'>Return to your dashboard</a></p>";
                        SDBM.showModal("#modal", {
                            allowDismiss: false,
                            showFooter: false,
                            title: "Success",
                            body: body
                        });
                    },
                    error: function() {
                        // TODO: fill this out
                        alert("An error occurred creating a manuscript.");
                    }
                });
            } else {
                SDBM.showErrorModal("#modal", "Creating a Manuscript requires more than 1 entry. Queue some entries and try again.");
            }
        } else {
            $.ajax({
                contentType: 'application/json',
                url: '/entry_manuscripts/update_multiple.json',
                type: 'PUT',
                dataType: 'json',
                data: JSON.stringify({
                    manuscript_id: manuscriptId,
                    cumulative_updated_at: cumulativeUpdatedAt,
                    entry_manuscripts: entryManuscripts
                }),
                success: function(data, textStatus, jqXHR) {
                    alert("Your changes have been saved");
                    location.reload(true);
                },
                error: function(xhr) {
                    var error = $.parseJSON(xhr.responseText).error;
                    SDBM.showErrorModal("#modal", error);
                }
            });
        }
        return false;
    });

    $("#show-matches").click(function () {
        $("#spinner").show();

        var url, key;
        if(mode == 'by_entry') {
            url = '/entries/' + entryId + '/similar.json',
            key = 'similar';
        } else {
            url = '/manuscripts/' + manuscriptId + '/entry_candidates.json',
            key = 'entry_candidates';
        }

        $.ajax({
            url: url,
            type: 'GET',
            success: function(data, textStatus, jqXHR) {
                if(data[key] && data[key].length > 0)  {
                    potentialMatches = data[key];
                    resultsTable.reload();
                } else {
                    SDBM.showModal("#modal", {
                        title: "No matches found",
                        body: "No matches found"
                    });
                }
            },
            error: function() {
                // TODO: fill this out
                alert("An error occurred finding matches.");
            },
            complete: function() {
                $("#spinner").hide();
            }
        });
    });

    $("#show-more-search-fields-link").click(function() {
        if($("#show-more-search-fields-link").text().match(/Show/)) {
            $("#show-more-search-fields-link").text("Hide additional search fields");
            $(".more-search-fields").show();
        } else {
            $("#show-more-search-fields-link").text("Show more search fields");
            $(".more-search-fields").hide();
        }
        return false;
    });
    
    $('#workspace_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#search_results_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    $('#search_results_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#workspace_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    
    $("#linking-tool-heading-id").text(headingId);
    $("#workspace-table-title").text(
        mode == 'by_entry' ? "Entry Queue for creating Links" : "Entries for " + headingId);
    $("#persist-entries-manuscript-link").text(
        mode == 'by_entry' ? "Create Manuscript Record" : "Save changes");

    $(".sdbmss-has-tooltip").each(function(idx, element) {
        var template = $(element).data("tooltip-template");
        SDBM.registerTooltip(element, template);
        $(element).click(function() {
            return false;
        });
    });
    
});

</script>
<% end %>

<div style="width: 100%;">
    <span style="font-size: 18px; font-weight: bold;">Linking Tool: <span id="linking-tool-heading-id"></span></span> (<a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_<%= @mode %>_instructions" href="#">click here for instructions</a> on how to link entries to manuscript records)
</div>

<% if @mode == 'by_entry' %>
    <p>This page allows you to create a <b>manuscript record</b> from this entry by linking it to one or more existing entries. You can link entries citing the same manuscript to track its transmission and location across time. If a <b>manuscript record</b> already exists, you can simply link this entry to it. Use the search window below to find other possible links and enter them in the entry queue to help determine whether a link really exists.</p>
<% else %>
    <p>This page allows you to link entries to an existing manuscript record. You can link entries citing the same manuscript to track its transmission and location across time. Use the search window below to find possible links and enter them in the Entry Queue to help determine whether a link really exists.</p>
<% end %>

<div style="margin-bottom: 6px">
    <span style="font-size: 14px; font-weight: bold;"><span id="workspace-table-title"></span></span>
    <button id="persist-entries-manuscript-link" class="btn btn-primary btn-xs" style="margin-left: 40px"></button>
</div>

<table id="workspace" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
    <thead>
        <tr>
            <!-- we populate TH elements dynamically -->
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<div style="margin-bottom: 6px; margin-top: 15px;">
    <span style="font-size: 14px; font-weight: bold;"><% if @mode == 'by_entry' %>Search for possible links<% else %>Search for other links<% end %></span> (click here for <a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_<%= @mode %>_search_instructions" href="#">instructions</a> and <a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_search_tips" href="#">search tips</a>)
</div>

<form class="form-horizontal search-form" style="margin-top: 10px;">
        <div style="height: 28px">
            <label style="width: 60px">Search</label>
            <input name="search_value" value="" size="30" type="text">
            <select name="search_field">
            <%- search_fields_for_advanced_search.sort.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
            <button id="search_submit" class="btn btn-primary btn-xs">Search</button>
            <img id="spinner" alt="working..." style="display: none;" src="<%= asset_path "spinner.gif" %>"/>
            <button id="show-matches" class="btn btn-primary btn-xs" style="margin-left: 40px">Show potential links</button>
        </div>
        <div style="display: none; height: 28px" class="more-search-fields">
            <span style="width: 60px; display: inline-block;">&nbsp;</span>
            <input name="search_value" value="" size="30" type="text">
            <select name="search_field">
            <%- search_fields_for_advanced_search.sort.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
        </div>
        <div style="display: none; height: 28px" class="more-search-fields">
            <span style="width: 60px; display: inline-block;">&nbsp;</span>
            <input name="search_value" value="" size="30" type="text">
            <select name="search_field">
            <%- search_fields_for_advanced_search.sort.each do |key, field_def| -%>
            <option value="<%= key %>"><%= field_def.label %></option>
            <%- end -%>
            </select>
            <div style="display: inline-block">
                Match <select style="width: 100px; display: inline" name="op"><option value="AND">all</option><option value="OR">any</option></select>
                of these fields
            </div>
        </div>
        <div>
            <a href="#" id="show-more-search-fields-link">Show more search fields</a>
        </div>
</form>

<table id="search_results" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
    <thead>
        <tr>
            <!-- we populate TH elements dynamically -->
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
