<% content_for :head do %>
<%= stylesheet_link_tag "extras", media: "all" %>
<script type="text/javascript">

$(document).ready(function() {

    SDBM.setPageFullWidth();

    var mode = '<%= @mode %>';
    var entryId;
    var manuscriptId;
    var manuscriptCreatedBy;
    var entryManuscripts;
    var headingId = '<%= @mode == 'by_entry' ? @entry.public_id : @manuscript.public_id %>';

    var unsavedChanges = false;

    <% if (@manuscript && can?(:unlink, @manuscript)) || (@entry && can?(:unlink, @entry)) %>
        var canUnlink = true
    <% else %>
        var canUnlink = false;
        var username = '<%= current_user.username %>';
    <% end %>
    
    <% if @mode == 'by_entry' %>
    entryId = <%= @entry.id %>;
    entryManuscripts = [
        {
            entry_id: entryId,
            relation_type: 'is'
        }
    ];
    <% else %>
    manuscriptId = <%= @manuscript.id %>;
    manuscriptCreatedBy = '<%= @manuscript.created_by %>';
    cumulativeUpdatedAt = <%= @manuscript.cumulative_updated_at %>;
    entryManuscripts = <%= JSON.generate(@manuscript.entry_manuscripts.map { |entry_manuscript|
                                                                            {
                                                                             id: entry_manuscript.id,
                                                                             entry_id: entry_manuscript.entry_id,
                                                                             manuscript_id: entry_manuscript.manuscript_id,
                                                                             relation_type: entry_manuscript.relation_type
                                                                             }
                                                                            }).html_safe %>;
    <% end %>

    var getActiveEntryManuscripts = function() {
        return entryManuscripts.filter(function (entry_manuscript) {
            return !entry_manuscript._destroy;
        });
    };

    var entryIdAlreadyExistsInWorkspace = function(entryId) {
        var idAlreadyExists = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId) {
                idAlreadyExists = true;
            }
        });
        return idAlreadyExists;
    };

    var addWorkspaceEntry = function(entryId, relation) {
        if (!entryIdAlreadyExistsInWorkspace(entryId)) {
            entryManuscripts.push({
                entry_id: entryId,
                relation_type: relation
            });
            unsavedChanges = true;
        }
    };

    var changeWorkspaceEntry = function (entryId, relation) {
        if(relation != 'unlink') {
            if (!entryIdAlreadyExistsInWorkspace(entryId)) {
                entryManuscripts.push({
                    entry_id: entryId,
                    relation_type: relation
                });
            } else {
                $.each(entryManuscripts, function (idx, workspaceEntry) {
                    if(workspaceEntry.entry_id == entryId) {
                        workspaceEntry.relation_type = relation;
                    }
                });
            }
        } else {
            deleteWorkspaceEntry(entryId);            
        }
        unsavedChanges = true;
    };

    var deleteWorkspaceEntry = function(entryIdToDelete) {
        // FIX ME - what is the purpose of this?
        if(mode == 'by_entry' && entryId == entryIdToDelete) {
            SDBM.showErrorModal("#modal", "You can't unlink the main entry.");
            return;
        }

        // FIX ME - should the last entry be removeable?  I think it should...
        if(getActiveEntryManuscripts().length < 1) {
            SDBM.showErrorModal("#modal", "You can't unlink that record. There must be at least one entry in the table.");
            return;
        }
        
        var idxToDelete = -1;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryIdToDelete) {
                idxToDelete = idx;
            }
        });
        if (idxToDelete != -1) {
            if(entryManuscripts[idxToDelete].id) {
                entryManuscripts[idxToDelete]._destroy = 1;
            } else {
                entryManuscripts.splice(idxToDelete, 1);
            }
        }
        unsavedChanges = true;
    };

    var isInWorkspace = function(entryId, relationType) {
        var inWorkspace = false;
        $.each(entryManuscripts, function (idx, workspaceEntry) {
            if(workspaceEntry.entry_id == entryId && workspaceEntry.relation_type == relationType) {
                inWorkspace = true;
            }
        });
        return inWorkspace;
    };
    
    var potentialMatches = null;

    var getRadioButtonHTML = function(sdbmTable, data, value) {
        var entryId = data[sdbmTable.getColumnIndex("ID")];
        var checked = isInWorkspace(entryId, value) ? "checked='checked'" : "";
        return '<input type="radio" class="toggle-entry-link" data-entry-id="' + entryId + '" name="entry_id_' + entryId + '" value="' + value + '" ' + checked + '/>';
    };

    var getButtonHTML = function(sdbmTable, data, value) {
        var entryId = data[sdbmTable.getColumnIndex("ID")];
        //var checked = isInWorkspace(entryId, value) ? "checked='checked'" : "";
        return '<a class="btn btn-danger btn-xs toggle-entry-link" data-entry-id="' + entryId + '" name="entry_id_' + entryId + '" value="' + value + '" >Unlink</a>';
    };

    // Fielded search specific params
    var translateSearchParams = function (sdbmTable, data) {
        params = sdbmTable.translateParamsToBlacklight(data);

        if(potentialMatches == null) {
            params["op"] = $("select[name='op']").val();

            $("select[name='search_field']").each(function (idx, element) {
                var search_field = $(element).val();
                var search_value = $($("input[name='search_value']")[idx]).val();
                if(search_value) {
                    params[search_field] = search_value;
                }
            });
        } else {
            params["entry_id"] = potentialMatches.join(" OR ");
        }
        
        return params;
    };

    var workspaceTable = new SDBM.EntryTable("#workspace", {
        dom: '<"clear">JRt',
        height: '135px',
        fixedColumns: 5,
        prependColumns: [
            {
                sdbmssMinWidthImportant: "50px",
                title: 'Link',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "is");
                }
            },
            {
                sdbmssMinWidthImportant: "60px",
                title: 'Fragment',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "partial");
                }
            },
            {
                sdbmssMinWidthImportant: "60px",
                title: 'Possible',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    return getRadioButtonHTML(workspaceTable, data, "possible");
                }
            },
            {
                sdbmssMinWidthImportant: "50px",
                title: 'Unlink',
                "data": null,
                "orderable": false,
                "className": 'text-center',
                "render": function (data, type, full, meta) {
                    if (canUnlink)
                        return getRadioButtonHTML(workspaceTable, data, "unlink");
                    else if (username == data[workspaceTable.getColumnIndex("Added By")] || username == manuscriptCreatedBy) {
                        return getRadioButtonHTML(workspaceTable, data, "unlink");
                    }               
                    else
                        return '<span class="text-danger">n/a</span>';
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            var params = sdbmTable.translateParamsToBlacklight(dt_params);

            params["approved"] = "*";

            // prevent an empty search from returning ALL entries
            params.entry_id = getActiveEntryManuscripts().length > 0 ? $.map(getActiveEntryManuscripts(), function(item) { return item.entry_id; }).join(" OR ") : "Nil";

            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();
                }
            });
        }
    });

    var resultsTable = new SDBM.EntryTable("#search_results", {
        dom: '<"clear"><"H linking_table_header"<"row"<"col-sm-6 text-right"rip>>>JRt<"F">',
        //dom: '<"row"<"col-sm-5"li><"col-sm-7 text-right" p<"btn-group btn-table-tool"<"wide"><"csv"><"columns">J>>>t',
        height: function() {
            // height gets passed into dataTables constructor before
            // it's had a chance to construct all its crazy DOM bits,
            // so it's hard to calculate height dynamically to fit the
            // viewport. This seems pretty decent.
            // FIX ME: doesn't work, though -> when the window is too small, the right part (search results) just don't appear
            var footer_size = 100;
            var minimum_height = 300;
            return Math.max(minimum_height, $(window).height() - $("#search_results").offset().top - footer_size);
        },
        fixedColumns: 2,
        prependColumns: [
            {
                sdbmssMinWidthImportant: "255px",
                title: 'Options',
                "data": null,
                "orderable": false,
                "render": function (data, type, full, meta) {
                    var entryId = data[resultsTable.getColumnIndex("ID")];
                    var manuscriptId = data[resultsTable.getColumnIndex("Manuscript")];
                    if(mode == 'by_entry') {
                        if(manuscriptId) {
                            return '<a href="#" data-manuscript-id="' + manuscriptId + '" class="link-to-manuscript-link">Link to SDBM_MS_' + manuscriptId + '</a>';
                        } else {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add to queue</a>';
                        }
                    } else {
                        if(!manuscriptId) {
                            return '<a href="#" data-entry-id="' + entryId + '" class="add-entry-link">Add this entry to manuscript record</a>';
                        }
                    }
                    return "";
                }
            }
        ],
        ajax: function (sdbmTable, dt_params, callback, settings) {
            $("#spinner").show();

            // seems like there should be a way to do this conditional
            // ajax and subsequent searchAndUpdateTable using
            // promises, but I can't figure that out right now
            
            var params = translateSearchParams(sdbmTable, dt_params);                
            params["approved"] = "*";
            sdbmTable.searchAndUpdateTable(params, callback, {
                'complete': function () {
                    $("#spinner").hide();
                }
            });
        }
    });

//    $("#search_results").wrap("<div id='scrollTop'></div>");
//    $('#scrollTop').doubleScroll();

    var doSearch = function() {
        potentialMatches = null;
        resultsTable.reload();
    };

    // TODO: fix row highlighting broken by fixed column datatable plugin

    $("#link-search").submit(function (e) {
        e.preventDefault();
        doSearch();
        return false;
    });

    $('#search_submit').click(function() {
        doSearch();
    });

    $("#addSearch").click( function (e) {
        var p = $('.search-fieldset').eq(0).clone();
        p.find("input", "select").val("");
        $(".search").append(p);
        p.find(".search-remove").click( function (e) {
            var p = $(this).closest('.search-fieldset');
            if ($('.search-fieldset').length > 1) {
                $(".search").find(p).remove();
            } else {                                    // otherwise, clear all the fields
                p.find("input").each(function (e) {
                    $(this).val("");
                })
                p.find("select[name=search_field]").find("option").first().attr("selected", true).change();
            }
        });
        setOptions(p);      
    });

    $(document).on("click", ".add-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        addWorkspaceEntry(entryId, "is");
        workspaceTable.reload();
        return false;
    });

    $(document).on("click", ".toggle-entry-link", function (event) {
        var entryId = $(event.target).data("entryId");
        var value = $(event.target).val();
        changeWorkspaceEntry(entryId, value);
        workspaceTable.reload();
        return false;
    });

    $(document).on("click", ".link-to-manuscript-link", function (event) {
        
        // warn user that they will lose unsaved changes
        var really = true;
        if (unsavedChanges) {
            really = confirm("You have unsaved changes that will be lost - continue?");
        }
        if (!really) return false;

        var manuscriptId = $(event.target).data("manuscriptId");

        // create a single EntryManuscript record
        $.ajax({
            url: "/entry_manuscripts.json",
            type: 'POST',
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify({
                entry_manuscript: {
                    manuscript_id: manuscriptId,
                    entry_id: entryId,
                    relation_type: 'is',
                }
            }),
            success: function(data, textStatus, jqXHR) {
                var title = "Successfully Linked";
                var body = '<p>Link between SDBM_' + entryId + ' and SDBM_MS_' + manuscriptId + ' successfully created.</p>' +
                           '<p><a class="manuscript-link" href="/linkingtool/manuscript/' + manuscriptId + '">Go to page for SDBM_MS_' + manuscriptId + ' now</a></p>';

                unsavedChanges = false;
                SDBM.showModal("#modal", {
                    allowDismiss: false,
                    showFooter: false,
                    title: title,
                    body: body
                });
            },
            error: function(xhr) {
                var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                SDBM.showErrorModal("#modal", error);
            }
        });

        return false;
    });


    $("#persist-entries-manuscript-link").click(function (event) {
        if(mode == 'by_entry') {
            if(entryManuscripts.length > 0) {
                // create a Manuscript and its EntryManuscripts
                $.ajax({
                    url: '/manuscripts.json',
                    type: 'POST',
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify({
                        manuscript: {
                            entry_manuscripts_attributes: entryManuscripts
                        }
                    }),
                    success: function(data, textStatus, jqXHR) {
                        var body = "<p>Manuscript record SDBM_MS_" + data.id + " successfully created!</p><p><a href='/linkingtool/manuscript/" + data.id + "'>Click here</a> to add more or edit links to SDBM_MS_" + data.id + "</p><p>or</p><p><a href='/dashboard'>Return to your dashboard</a></p>";
                        SDBM.showModal("#modal", {
                            allowDismiss: false,
                            showFooter: false,
                            title: "Success",
                            body: body
                        });
                    },
                    error: function(xhr) {
                        var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                        SDBM.showErrorModal("#modal", error);
                    }
                });
            } else {
                SDBM.showErrorModal("#modal", "Creating a Manuscript requires at least 1 entry. Queue some entries and try again.");
            }
        } else {
            $.ajax({
                contentType: 'application/json',
                url: '/entry_manuscripts/update_multiple.json',
                type: 'PUT',
                dataType: 'json',
                data: JSON.stringify({
                    manuscript_id: manuscriptId,
                    cumulative_updated_at: cumulativeUpdatedAt,
                    entry_manuscripts: entryManuscripts
                }),
                success: function(data, textStatus, jqXHR) {
                    unsavedChanges = false;
                    // unknown error caused ONLY this link to just not work -> so I just added a manual "onclick -> reload" event handler
                    var body = '<p>Your changes have been saved.<p><a onclick="window.location.reload();" href="/linkingtool/manuscript/' + manuscriptId + '">Click here</a> to reload this page</p>';
                    SDBM.showModal("#modal", {
                        allowDismiss: false,
                        showFooter: false,
                        title: "Success",
                        body: body
                    });
                },
                error: function(xhr) {
                    var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                    SDBM.showErrorModal("#modal", error);
                }
            });
        }
        return false;
    });

    $("#show-matches").click(function () {
        $("#spinner").show();

        var url, key;
        if(mode == 'by_entry') {
            url = '/entries/' + entryId + '/similar.json',
            key = 'similar';
        } else {
            url = '/manuscripts/' + manuscriptId + '/entry_candidates.json',
            key = 'entry_candidates';
        }

        $.ajax({
            url: url,
            type: 'GET',
            success: function(data, textStatus, jqXHR) {
                if(data[key] && data[key].length > 0)  {
                    potentialMatches = data[key];
                    resultsTable.reload();
                } else {
                    SDBM.showModal("#modal", {
                        title: "No matches found",
                        body: "No matches found"
                    });
                }
            },
            error: function(xhr) {
                var error = SDBM.parseRailsErrors($.parseJSON(xhr.responseText).errors).join("; ");
                SDBM.showErrorModal("#modal", error);
            },
            complete: function() {
                $("#spinner").hide();
            }
        });
    });

    $("#show-more-search-fields-link").click(function() {
        if($("#show-more-search-fields-link").text().match(/Show/)) {
            $("#show-more-search-fields-link").text("Hide additional search fields");
            $(".more-search-fields").show();
        } else {
            $("#show-more-search-fields-link").text("Show more search fields");
            $(".more-search-fields").hide();
        }
        return false;
    });
    
    $('#workspace_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#search_results_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    $('#search_results_wrapper .dataTables_scrollBody').on('scroll', function (event) {
        $("#workspace_wrapper .dataTables_scrollBody").scrollLeft($(event.target).scrollLeft());
    });
    
    $("#linking-tool-heading-id").text(headingId);
    $("#workspace-table-title").text(
        mode == 'by_entry' ? "Entry Queue for creating Links" : "Entries for " + headingId);
    $("#persist-entries-manuscript-link").text(
        mode == 'by_entry' ? "Create Manuscript Record" : "Save changes");

    $(".sdbmss-has-tooltip").each(function(idx, element) {
        var template = $(element).data("tooltip-template");
        SDBM.registerTooltip(element, template);
        $(element).click(function() {
            return false;
        });
    });

    $(window).bind('beforeunload', function() {
        if (unsavedChanges) {
            return "You have unsaved changes";
        }
    });
    
});

</script>
<% end %>

<div class="row">
    <div class="col-sm-7">
        <div class="panel panel-default">
            <div class="panel-heading-noformat" data-toggle="collapse" href="#show_linking_record">
                <dl class="document-show-heading dl-horizontal dl-invert">
                  <dt></dt>
                  <dd class="h4"><strong> 
                    <% if @manuscript %>
                        <%= link_to "Manuscript #{@manuscript.public_id}", manuscript_path(@manuscript) %>
                    <% elsif @entry %>
                        <%= link_to "Entry #{@entry.public_id}", entry_path(@entry) %>
                    <% end %>
                    </strong></dd>
                </dl>
            </div>
            <div class="panel-body-noformat collapse in" id="show_linking_record">
                <% if @manuscript %>
                    <%= render partial: "bookmarks/show_manuscript", locals: {manuscript: @manuscript} %>
                <% elsif @entry %>
                    <%= render partial: "bookmarks/show_entry", locals: {entry: @entry} %>
                <% end %>
            </div>
        </div>
    </div>
    <div class="col-sm-5">
        <h4><a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_<%= @mode %>_instructions" href="#">Click here for instructions</a> on how to link entries to manuscript records</h4>
        <% if @mode == 'by_entry' %>
            <p>This page allows you to create a <b>manuscript record</b> from this entry by linking it to one or more existing entries citing the same manuscript, in order to track its transmission and location across time.  You may create a manuscript record with one entry if you cannot find other entries to link to a single entry.</p>
            <p>If a <b>manuscript record</b> already exists, you can simply link this entry to it. Use the search window below to find other possible links and enter them in the entry queue to help determine whether a link really exists.</p>
        <% else %>
            <p>This page allows you to link <strong>entries</strong> to an <strong>existing manuscript record</strong>. You can link entries citing the same manuscript to track its transmission and location across time. Use the search window below to find possible links and enter them in the Entry Queue to help determine whether a link really exists.</p>
        <% end %>
    </div>
    <div class="col-sm-1"></div>
</div>

<% content_for :breadcrumbs do %>
    <% if @entry %>
        <li class="list-group-item breadcrumb"><%= link_to "Manage Entries", entries_path %></li>
        <li class="list-group-item breadcrumb"><%= link_to @entry.public_id, entry_path(@entry) %></li>
        <li class="list-group-item breadcrumb active"><a href="">Linking tool for <%= @entry.public_id %></a></li>
    <% elsif @manuscript %>
        <li class="list-group-item breadcrumb"><%= link_to "Manage Manuscripts", manuscripts_path %></li>
        <li class="list-group-item breadcrumb"><%= link_to @manuscript.public_id, manuscript_path(@manuscript) %></li>
        <li class="list-group-item breadcrumb active"><a href="">Linking tool for <%= @manuscript.public_id %></a></li>
    <% end %>    
<% end %>

<div style="margin-bottom: 6px">
    <span style="font-size: 14px; font-weight: bold;"><span id="workspace-table-title"></span></span>
    <button id="persist-entries-manuscript-link" class="btn btn-primary btn-xs" style="margin-left: 40px"></button>
</div>

<table id="workspace" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
    <thead>
        <tr>
            <!-- we populate TH elements dynamically -->
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<div class="row" style="margin-top: 20px;">
    <div class="col-xs-6">
        <%= render partial: "linking_tool/show_form" %>
    </div>
    <div class="col-xs-6">
        <div style="margin-bottom: 6px; margin-top: 15px;">
            <span class="h4">
                <strong>
                <% if @mode == 'by_entry' %>
                    Search for possible links
                <% else %>
                    Search for other links
                <% end %>
                </strong>
            </span><br>
            (click here for <a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_<%= @mode %>_search_instructions" href="#">instructions</a> and <a class="sdbmss-has-tooltip" data-tooltip-template="linking_tool_search_tips" href="#">search tips</a>)
        </div>
    </div>
</div>
<table id="search_results" class="sdbm-table table dataTable table-striped table-bordered nowrap compact" style="width: 100%">
    <thead>
        <tr>
            <!-- we populate TH elements dynamically -->
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
