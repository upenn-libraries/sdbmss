 <% if params[:last_search] %>
    <span id="last_search" data="<%= session[:last_name_search].to_json %>"></span>
<% end %>
<script type="text/javascript">
load_session = '<%= params[:last_search] %>' == 'true';
 $(document).ready(function() {

     var resourceName = "<%= resource_name %>";

     // flag = show all records, or only those that the user created
     <% if can? :index, model_class %>
         var onlyMine = 0;
     <% else %>
         var onlyMine = 1;
     <% end %>

     <% if can? :merge, model_class  %>
         var canMerge = 1;
     <% else %>
         var canMerge = 0;
     <% end %>

     // Subclass of SDBM.ManageRecords tailored for display of names (ie users)
     var ManageNames = function(options) {
        SDBM.ManageRecords.call(this, options);
     };
     ManageNames.prototype = Object.create(SDBM.ManageRecords.prototype);

     ManageNames.prototype.getColumns = function() {
        var manageRecords = this;

        return [
            {
                //title: '<a href="#" class="btn btn-default btn-xs glyphicon glyphicon-unchecked hideIfReviewed" id="select-all"></a>',
                title: '<input type="checkbox" id="select-all" class="hideIfReviewed">',
                orderable: false,
                className: 'text-center unreviewed_only',
                render: function (data, type, full, meta) {
                    if(manageRecords.getUnreviewedOnly() === 1) {
                        return '<input type="checkbox" name="review" value="' + full[manageRecords.dataTable.getColumnIndex("ID")] + '"/>';
                    }
                    return '';
                }
            },
            {
                title: 'Options',
                orderable: false,
                render: function (data, type, full, meta) {
                    var result = '<span class="btn-group options-btn-group">';
                    result += full[manageRecords.dataTable.getColumnIndex("BookmarkWatch")];
                    //result += '<a onclick="addBookmark(' + data + ', \'Name\');" class="btn btn-xs btn-default control-bookmark bookmark-link" in_bookmarks="/names/' + data + '"><span class="glyphicon glyphicon-bookmark"></span></a>';
                    result += '<a class="btn btn-xs btn-success" href="/' + manageRecords.options.resourceName + '/' + data + '/edit/">Edit</a>';
                    result += '<a class="btn btn-xs btn-danger delete-link" id="delete_' + data + '" href="/' + manageRecords.options.resourceName + '/' + data + '.json">Delete</a>';
                    if (canMerge) {
                        result += '<a class="btn btn-xs btn-info merge-link" id="merge_' + data + '" href="/' + manageRecords.options.resourceName + '/' + data + '/merge">Merge</a>';
                    }
                    result += "</span>";
                    return result;
                },
            },
            {
                title: 'ID',
                render: function (data, type, full, meta) { 
                    var str = '<a href="/' + manageRecords.options.resourceName + '/' + data + '/">SDBM_NAME_' + data + '</a>';
                    return str;
                },
                dbSortField: 'id'
            },
            {
                title: 'Name',
                dbSortField: manageRecords.options.searchNameField
            },
            {
                title: 'VIAF ID',
                render: function (data, type, full, meta) {
                    var str = "";
                    if(data) {
                        str = '<a target="_blank" href="http://viaf.org/viaf/' + data + '/">' + data + '</a>';
                    }
                    return str;
                },
                dbSortField: 'viaf_id'
            },
            {
                title: 'Other Info',
                dbSortField: 'other_info'
            },
            {
                title: 'Type',
                dbSortField: 'subtype'
            },
            {
                title: 'Places',
                dbSortField: 'places'
            },
            {
                title: 'Start Date',
                dbSortField: 'startdate'
            },
            {
                title: 'End Date',
                dbSortField: 'enddate'
            },
            {
                title: 'As Author',
                dbSortField: 'authors_count'
            },
            {
                title: 'As Artist',
                dbSortField: 'artists_count'
            },
            {
                title: 'As Scribe',
                dbSortField: 'scribes_count'
            },
            {
                title: 'As Source Agent',
                dbSortField: 'source_agents_count'
            },
            {
                title: 'As Sale Agent',
                dbSortField: 'sale_agents_count'
            },
            {
                title: 'As Prov Agent',
                dbSortField: 'provenance_count'
            },
            {
                title: 'Approved',
                dbSortField: 'reviewed'
            },
            {
                title: 'Problem',
                dbSortField: 'problem'
            },
            {
                title: 'Confirms',
                dbSortField: 'confirms'
            },
            {
                title: 'Disputes',
                dbSortField: 'disputes'
            },            
            {
                title: 'Added By',
                dbSortField: 'created_by'
            },
            {
                title: 'Added On',
                dbSortField: 'created_at'
            },
            {
                title: 'Updated By',
                dbSortField: 'updated_by'
            },
            {
                title: 'Updated On',
                dbSortField: 'updated_at'
            },
            {
                title: 'BookmarkWatch',
                visible: false,
                searchable: false,
                never_show: true
            }
        ];
     };

     ManageNames.prototype.searchResultToTableRow = function (result) {
         return [
             null,
             result.id,
             result.id,
             result[this.options.searchNameField],
             result.viaf_id,
             result.other_info,
             result.subtype,
             result.places,
             result.startdate,
             result.enddate,
             result.authors_count,
             result.artists_count,
             result.scribes_count,
             result.source_agents_count,
             result.sale_agents_count,
             result.provenance_count,
             result.reviewed.toString(),
             //result.confirmed.toString(),
             result.problem,
             result.confirms,
             result.disputes,
             result.created_by || "",
             result.created_at || "",
             result.updated_by || "",
             result.updated_at || "",
             result.bookmarkwatch
         ];
     };

     $('#search_results').on('draw.dt', function () {
        bindRemoteAjaxCallback();
     });

     var config = {
         resourceName: "<%= resource_name %>",
         resourceNameSingular: "<%= resource_name.singularize %>",
         resourceNamePlural: "<%= resource_name.pluralize %>",
         showOnlyRecordsCreatedByUser: onlyMine,
         searchNameField: "name",
     };
     // arbitrary screen width for fixed columns...
     if (window.screen.width > 640) {
        config.fixedColumns = 4
     }

     var manageNames = new ManageNames(config);
     //manageNames.setFormStateFromURL();

     //manageNames.dataTable.reload();         

 });

</script>

